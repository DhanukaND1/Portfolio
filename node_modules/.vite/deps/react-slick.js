import { __commonJS, __esm, __export, __toCommonJS, require_react } from "./react-BQ5sj3AS.js";

//#region node_modules/react-slick/lib/initial-state.js
var require_initial_state = /* @__PURE__ */ __commonJS({ "node_modules/react-slick/lib/initial-state.js": ((exports) => {
	Object.defineProperty(exports, "__esModule", { value: true });
	var initialState = {
		animating: false,
		autoplaying: null,
		currentDirection: 0,
		currentLeft: null,
		currentSlide: 0,
		direction: 1,
		dragging: false,
		edgeDragged: false,
		initialized: false,
		lazyLoadedList: [],
		listHeight: null,
		listWidth: null,
		scrolling: false,
		slideCount: null,
		slideHeight: null,
		slideWidth: null,
		swipeLeft: null,
		swiped: false,
		swiping: false,
		touchObject: {
			startX: 0,
			startY: 0,
			curX: 0,
			curY: 0
		},
		trackStyle: {},
		trackWidth: 0,
		targetSlide: 0
	};
	exports["default"] = initialState;
}) });

//#endregion
//#region node_modules/lodash.debounce/index.js
var require_lodash = /* @__PURE__ */ __commonJS({ "node_modules/lodash.debounce/index.js": ((exports, module) => {
	/**
	* lodash (Custom Build) <https://lodash.com/>
	* Build: `lodash modularize exports="npm" -o ./`
	* Copyright jQuery Foundation and other contributors <https://jquery.org/>
	* Released under MIT license <https://lodash.com/license>
	* Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	* Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	*/
	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = "Expected a function";
	/** Used as references for various `Number` constants. */
	var NAN = NaN;
	/** `Object#toString` result references. */
	var symbolTag = "[object Symbol]";
	/** Used to match leading and trailing whitespace. */
	var reTrim = /^\s+|\s+$/g;
	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;
	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;
	/** Built-in method references without a dependency on `root`. */
	var freeParseInt = parseInt;
	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
	/** Detect free variable `self`. */
	var freeSelf = typeof self == "object" && self && self.Object === Object && self;
	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function("return this")();
	/**
	* Used to resolve the
	* [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	* of values.
	*/
	var objectToString = Object.prototype.toString;
	var nativeMax = Math.max, nativeMin = Math.min;
	/**
	* Gets the timestamp of the number of milliseconds that have elapsed since
	* the Unix epoch (1 January 1970 00:00:00 UTC).
	*
	* @static
	* @memberOf _
	* @since 2.4.0
	* @category Date
	* @returns {number} Returns the timestamp.
	* @example
	*
	* _.defer(function(stamp) {
	*   console.log(_.now() - stamp);
	* }, _.now());
	* // => Logs the number of milliseconds it took for the deferred invocation.
	*/
	var now = function() {
		return root.Date.now();
	};
	/**
	* Creates a debounced function that delays invoking `func` until after `wait`
	* milliseconds have elapsed since the last time the debounced function was
	* invoked. The debounced function comes with a `cancel` method to cancel
	* delayed `func` invocations and a `flush` method to immediately invoke them.
	* Provide `options` to indicate whether `func` should be invoked on the
	* leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	* with the last arguments provided to the debounced function. Subsequent
	* calls to the debounced function return the result of the last `func`
	* invocation.
	*
	* **Note:** If `leading` and `trailing` options are `true`, `func` is
	* invoked on the trailing edge of the timeout only if the debounced function
	* is invoked more than once during the `wait` timeout.
	*
	* If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	* until to the next tick, similar to `setTimeout` with a timeout of `0`.
	*
	* See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	* for details over the differences between `_.debounce` and `_.throttle`.
	*
	* @static
	* @memberOf _
	* @since 0.1.0
	* @category Function
	* @param {Function} func The function to debounce.
	* @param {number} [wait=0] The number of milliseconds to delay.
	* @param {Object} [options={}] The options object.
	* @param {boolean} [options.leading=false]
	*  Specify invoking on the leading edge of the timeout.
	* @param {number} [options.maxWait]
	*  The maximum time `func` is allowed to be delayed before it's invoked.
	* @param {boolean} [options.trailing=true]
	*  Specify invoking on the trailing edge of the timeout.
	* @returns {Function} Returns the new debounced function.
	* @example
	*
	* // Avoid costly calculations while the window size is in flux.
	* jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	*
	* // Invoke `sendMail` when clicked, debouncing subsequent calls.
	* jQuery(element).on('click', _.debounce(sendMail, 300, {
	*   'leading': true,
	*   'trailing': false
	* }));
	*
	* // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	* var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	* var source = new EventSource('/stream');
	* jQuery(source).on('message', debounced);
	*
	* // Cancel the trailing debounced invocation.
	* jQuery(window).on('popstate', debounced.cancel);
	*/
	function debounce(func, wait, options) {
		var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
		if (typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
		wait = toNumber(wait) || 0;
		if (isObject(options)) {
			leading = !!options.leading;
			maxing = "maxWait" in options;
			maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
			trailing = "trailing" in options ? !!options.trailing : trailing;
		}
		function invokeFunc(time) {
			var args = lastArgs, thisArg = lastThis;
			lastArgs = lastThis = void 0;
			lastInvokeTime = time;
			result = func.apply(thisArg, args);
			return result;
		}
		function leadingEdge(time) {
			lastInvokeTime = time;
			timerId = setTimeout(timerExpired, wait);
			return leading ? invokeFunc(time) : result;
		}
		function remainingWait(time) {
			var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result$1 = wait - timeSinceLastCall;
			return maxing ? nativeMin(result$1, maxWait - timeSinceLastInvoke) : result$1;
		}
		function shouldInvoke(time) {
			var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
			return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
		}
		function timerExpired() {
			var time = now();
			if (shouldInvoke(time)) return trailingEdge(time);
			timerId = setTimeout(timerExpired, remainingWait(time));
		}
		function trailingEdge(time) {
			timerId = void 0;
			if (trailing && lastArgs) return invokeFunc(time);
			lastArgs = lastThis = void 0;
			return result;
		}
		function cancel() {
			if (timerId !== void 0) clearTimeout(timerId);
			lastInvokeTime = 0;
			lastArgs = lastCallTime = lastThis = timerId = void 0;
		}
		function flush() {
			return timerId === void 0 ? result : trailingEdge(now());
		}
		function debounced() {
			var time = now(), isInvoking = shouldInvoke(time);
			lastArgs = arguments;
			lastThis = this;
			lastCallTime = time;
			if (isInvoking) {
				if (timerId === void 0) return leadingEdge(lastCallTime);
				if (maxing) {
					timerId = setTimeout(timerExpired, wait);
					return invokeFunc(lastCallTime);
				}
			}
			if (timerId === void 0) timerId = setTimeout(timerExpired, wait);
			return result;
		}
		debounced.cancel = cancel;
		debounced.flush = flush;
		return debounced;
	}
	/**
	* Checks if `value` is the
	* [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	* of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	*
	* @static
	* @memberOf _
	* @since 0.1.0
	* @category Lang
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is an object, else `false`.
	* @example
	*
	* _.isObject({});
	* // => true
	*
	* _.isObject([1, 2, 3]);
	* // => true
	*
	* _.isObject(_.noop);
	* // => true
	*
	* _.isObject(null);
	* // => false
	*/
	function isObject(value) {
		var type = typeof value;
		return !!value && (type == "object" || type == "function");
	}
	/**
	* Checks if `value` is object-like. A value is object-like if it's not `null`
	* and has a `typeof` result of "object".
	*
	* @static
	* @memberOf _
	* @since 4.0.0
	* @category Lang
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	* @example
	*
	* _.isObjectLike({});
	* // => true
	*
	* _.isObjectLike([1, 2, 3]);
	* // => true
	*
	* _.isObjectLike(_.noop);
	* // => false
	*
	* _.isObjectLike(null);
	* // => false
	*/
	function isObjectLike(value) {
		return !!value && typeof value == "object";
	}
	/**
	* Checks if `value` is classified as a `Symbol` primitive or object.
	*
	* @static
	* @memberOf _
	* @since 4.0.0
	* @category Lang
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	* @example
	*
	* _.isSymbol(Symbol.iterator);
	* // => true
	*
	* _.isSymbol('abc');
	* // => false
	*/
	function isSymbol(value) {
		return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
	}
	/**
	* Converts `value` to a number.
	*
	* @static
	* @memberOf _
	* @since 4.0.0
	* @category Lang
	* @param {*} value The value to process.
	* @returns {number} Returns the number.
	* @example
	*
	* _.toNumber(3.2);
	* // => 3.2
	*
	* _.toNumber(Number.MIN_VALUE);
	* // => 5e-324
	*
	* _.toNumber(Infinity);
	* // => Infinity
	*
	* _.toNumber('3.2');
	* // => 3.2
	*/
	function toNumber(value) {
		if (typeof value == "number") return value;
		if (isSymbol(value)) return NAN;
		if (isObject(value)) {
			var other = typeof value.valueOf == "function" ? value.valueOf() : value;
			value = isObject(other) ? other + "" : other;
		}
		if (typeof value != "string") return value === 0 ? value : +value;
		value = value.replace(reTrim, "");
		var isBinary = reIsBinary.test(value);
		return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
	}
	module.exports = debounce;
}) });

//#endregion
//#region node_modules/classnames/index.js
var require_classnames = /* @__PURE__ */ __commonJS({ "node_modules/classnames/index.js": ((exports, module) => {
	/*!
	Copyright (c) 2018 Jed Watson.
	Licensed under the MIT License (MIT), see
	http://jedwatson.github.io/classnames
	*/
	(function() {
		var hasOwn = {}.hasOwnProperty;
		function classNames() {
			var classes = "";
			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (arg) classes = appendClass(classes, parseValue(arg));
			}
			return classes;
		}
		function parseValue(arg) {
			if (typeof arg === "string" || typeof arg === "number") return arg;
			if (typeof arg !== "object") return "";
			if (Array.isArray(arg)) return classNames.apply(null, arg);
			if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) return arg.toString();
			var classes = "";
			for (var key in arg) if (hasOwn.call(arg, key) && arg[key]) classes = appendClass(classes, key);
			return classes;
		}
		function appendClass(value, newClass) {
			if (!newClass) return value;
			if (value) return value + " " + newClass;
			return value + newClass;
		}
		if (typeof module !== "undefined" && module.exports) {
			classNames.default = classNames;
			module.exports = classNames;
		} else if (typeof define === "function" && typeof define.amd === "object" && define.amd) define("classnames", [], function() {
			return classNames;
		});
		else window.classNames = classNames;
	})();
}) });

//#endregion
//#region node_modules/react-slick/lib/default-props.js
var require_default_props = /* @__PURE__ */ __commonJS({ "node_modules/react-slick/lib/default-props.js": ((exports) => {
	Object.defineProperty(exports, "__esModule", { value: true });
	var _react$6 = _interopRequireDefault$7(require_react());
	function _interopRequireDefault$7(e) {
		return e && e.__esModule ? e : { "default": e };
	}
	var defaultProps = {
		accessibility: true,
		adaptiveHeight: false,
		afterChange: null,
		appendDots: function appendDots(dots) {
			return /* @__PURE__ */ _react$6["default"].createElement("ul", { style: { display: "block" } }, dots);
		},
		arrows: true,
		autoplay: false,
		autoplaySpeed: 3e3,
		beforeChange: null,
		centerMode: false,
		centerPadding: "50px",
		className: "",
		cssEase: "ease",
		customPaging: function customPaging(i) {
			return /* @__PURE__ */ _react$6["default"].createElement("button", null, i + 1);
		},
		dots: false,
		dotsClass: "slick-dots",
		draggable: true,
		easing: "linear",
		edgeFriction: .35,
		fade: false,
		focusOnSelect: false,
		infinite: true,
		initialSlide: 0,
		lazyLoad: null,
		nextArrow: null,
		onEdge: null,
		onInit: null,
		onLazyLoadError: null,
		onReInit: null,
		pauseOnDotsHover: false,
		pauseOnFocus: false,
		pauseOnHover: true,
		prevArrow: null,
		responsive: null,
		rows: 1,
		rtl: false,
		slide: "div",
		slidesPerRow: 1,
		slidesToScroll: 1,
		slidesToShow: 1,
		speed: 500,
		swipe: true,
		swipeEvent: null,
		swipeToSlide: false,
		touchMove: true,
		touchThreshold: 5,
		useCSS: true,
		useTransform: true,
		variableWidth: false,
		vertical: false,
		verticalSwiping: false,
		waitForAnimate: true,
		asNavFor: null,
		unslick: false
	};
	exports["default"] = defaultProps;
}) });

//#endregion
//#region node_modules/react-slick/lib/utils/innerSliderUtils.js
var require_innerSliderUtils = /* @__PURE__ */ __commonJS({ "node_modules/react-slick/lib/utils/innerSliderUtils.js": ((exports) => {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.clamp = clamp;
	exports.filterSettings = filterSettings;
	var _react$5 = _interopRequireDefault$6(require_react());
	var _defaultProps$1 = _interopRequireDefault$6(require_default_props());
	function _interopRequireDefault$6(e) {
		return e && e.__esModule ? e : { "default": e };
	}
	function _typeof$5(o) {
		"@babel/helpers - typeof";
		return _typeof$5 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o$1) {
			return typeof o$1;
		} : function(o$1) {
			return o$1 && "function" == typeof Symbol && o$1.constructor === Symbol && o$1 !== Symbol.prototype ? "symbol" : typeof o$1;
		}, _typeof$5(o);
	}
	function ownKeys$5(e, r) {
		var t = Object.keys(e);
		if (Object.getOwnPropertySymbols) {
			var o = Object.getOwnPropertySymbols(e);
			r && (o = o.filter(function(r$1) {
				return Object.getOwnPropertyDescriptor(e, r$1).enumerable;
			})), t.push.apply(t, o);
		}
		return t;
	}
	function _objectSpread$5(e) {
		for (var r = 1; r < arguments.length; r++) {
			var t = null != arguments[r] ? arguments[r] : {};
			r % 2 ? ownKeys$5(Object(t), !0).forEach(function(r$1) {
				_defineProperty$5(e, r$1, t[r$1]);
			}) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$5(Object(t)).forEach(function(r$1) {
				Object.defineProperty(e, r$1, Object.getOwnPropertyDescriptor(t, r$1));
			});
		}
		return e;
	}
	function _defineProperty$5(e, r, t) {
		return (r = _toPropertyKey$5(r)) in e ? Object.defineProperty(e, r, {
			value: t,
			enumerable: !0,
			configurable: !0,
			writable: !0
		}) : e[r] = t, e;
	}
	function _toPropertyKey$5(t) {
		var i = _toPrimitive$5(t, "string");
		return "symbol" == _typeof$5(i) ? i : i + "";
	}
	function _toPrimitive$5(t, r) {
		if ("object" != _typeof$5(t) || !t) return t;
		var e = t[Symbol.toPrimitive];
		if (void 0 !== e) {
			var i = e.call(t, r || "default");
			if ("object" != _typeof$5(i)) return i;
			throw new TypeError("@@toPrimitive must return a primitive value.");
		}
		return ("string" === r ? String : Number)(t);
	}
	function clamp(number, lowerBound, upperBound) {
		return Math.max(lowerBound, Math.min(number, upperBound));
	}
	var safePreventDefault = exports.safePreventDefault = function safePreventDefault$1(event) {
		if (![
			"onTouchStart",
			"onTouchMove",
			"onWheel"
		].includes(event._reactName)) event.preventDefault();
	};
	var getOnDemandLazySlides = exports.getOnDemandLazySlides = function getOnDemandLazySlides$1(spec) {
		var onDemandSlides = [];
		var startIndex = lazyStartIndex(spec);
		var endIndex = lazyEndIndex(spec);
		for (var slideIndex = startIndex; slideIndex < endIndex; slideIndex++) if (spec.lazyLoadedList.indexOf(slideIndex) < 0) onDemandSlides.push(slideIndex);
		return onDemandSlides;
	};
	exports.getRequiredLazySlides = function getRequiredLazySlides(spec) {
		var requiredSlides = [];
		var startIndex = lazyStartIndex(spec);
		var endIndex = lazyEndIndex(spec);
		for (var slideIndex = startIndex; slideIndex < endIndex; slideIndex++) requiredSlides.push(slideIndex);
		return requiredSlides;
	};
	var lazyStartIndex = exports.lazyStartIndex = function lazyStartIndex$1(spec) {
		return spec.currentSlide - lazySlidesOnLeft(spec);
	};
	var lazyEndIndex = exports.lazyEndIndex = function lazyEndIndex$1(spec) {
		return spec.currentSlide + lazySlidesOnRight(spec);
	};
	var lazySlidesOnLeft = exports.lazySlidesOnLeft = function lazySlidesOnLeft$1(spec) {
		return spec.centerMode ? Math.floor(spec.slidesToShow / 2) + (parseInt(spec.centerPadding) > 0 ? 1 : 0) : 0;
	};
	var lazySlidesOnRight = exports.lazySlidesOnRight = function lazySlidesOnRight$1(spec) {
		return spec.centerMode ? Math.floor((spec.slidesToShow - 1) / 2) + 1 + (parseInt(spec.centerPadding) > 0 ? 1 : 0) : spec.slidesToShow;
	};
	var getWidth = exports.getWidth = function getWidth$1(elem) {
		return elem && elem.offsetWidth || 0;
	};
	var getHeight = exports.getHeight = function getHeight$1(elem) {
		return elem && elem.offsetHeight || 0;
	};
	var getSwipeDirection = exports.getSwipeDirection = function getSwipeDirection$1(touchObject) {
		var verticalSwiping = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
		var xDist = touchObject.startX - touchObject.curX, yDist = touchObject.startY - touchObject.curY, r = Math.atan2(yDist, xDist), swipeAngle = Math.round(r * 180 / Math.PI);
		if (swipeAngle < 0) swipeAngle = 360 - Math.abs(swipeAngle);
		if (swipeAngle <= 45 && swipeAngle >= 0 || swipeAngle <= 360 && swipeAngle >= 315) return "left";
		if (swipeAngle >= 135 && swipeAngle <= 225) return "right";
		if (verticalSwiping === true) if (swipeAngle >= 35 && swipeAngle <= 135) return "up";
		else return "down";
		return "vertical";
	};
	var canGoNext = exports.canGoNext = function canGoNext$1(spec) {
		var canGo = true;
		if (!spec.infinite) {
			if (spec.centerMode && spec.currentSlide >= spec.slideCount - 1) canGo = false;
			else if (spec.slideCount <= spec.slidesToShow || spec.currentSlide >= spec.slideCount - spec.slidesToShow) canGo = false;
		}
		return canGo;
	};
	exports.extractObject = function extractObject(spec, keys) {
		var newObject = {};
		keys.forEach(function(key) {
			return newObject[key] = spec[key];
		});
		return newObject;
	};
	exports.initializedState = function initializedState(spec) {
		var slideCount = _react$5["default"].Children.count(spec.children);
		var listNode = spec.listRef;
		var listWidth = Math.ceil(getWidth(listNode));
		var trackNode = spec.trackRef && spec.trackRef.node;
		var trackWidth = Math.ceil(getWidth(trackNode));
		var slideWidth;
		if (!spec.vertical) {
			var centerPaddingAdj = spec.centerMode && parseInt(spec.centerPadding) * 2;
			if (typeof spec.centerPadding === "string" && spec.centerPadding.slice(-1) === "%") centerPaddingAdj *= listWidth / 100;
			slideWidth = Math.ceil((listWidth - centerPaddingAdj) / spec.slidesToShow);
		} else slideWidth = listWidth;
		var slideHeight = listNode && getHeight(listNode.querySelector("[data-index=\"0\"]"));
		var listHeight = slideHeight * spec.slidesToShow;
		var currentSlide = spec.currentSlide === void 0 ? spec.initialSlide : spec.currentSlide;
		if (spec.rtl && spec.currentSlide === void 0) currentSlide = slideCount - 1 - spec.initialSlide;
		var lazyLoadedList = spec.lazyLoadedList || [];
		var slidesToLoad = getOnDemandLazySlides(_objectSpread$5(_objectSpread$5({}, spec), {}, {
			currentSlide,
			lazyLoadedList
		}));
		lazyLoadedList = lazyLoadedList.concat(slidesToLoad);
		var state = {
			slideCount,
			slideWidth,
			listWidth,
			trackWidth,
			currentSlide,
			slideHeight,
			listHeight,
			lazyLoadedList
		};
		if (spec.autoplaying === null && spec.autoplay) state["autoplaying"] = "playing";
		return state;
	};
	exports.slideHandler = function slideHandler(spec) {
		var waitForAnimate = spec.waitForAnimate, animating = spec.animating, fade = spec.fade, infinite = spec.infinite, index$1 = spec.index, slideCount = spec.slideCount, lazyLoad = spec.lazyLoad, currentSlide = spec.currentSlide, centerMode = spec.centerMode, slidesToScroll = spec.slidesToScroll, slidesToShow = spec.slidesToShow, useCSS = spec.useCSS;
		var lazyLoadedList = spec.lazyLoadedList;
		if (waitForAnimate && animating) return {};
		var animationSlide = index$1, finalSlide, animationLeft, finalLeft;
		var state = {}, nextState = {};
		var targetSlide = infinite ? index$1 : clamp(index$1, 0, slideCount - 1);
		if (fade) {
			if (!infinite && (index$1 < 0 || index$1 >= slideCount)) return {};
			if (index$1 < 0) animationSlide = index$1 + slideCount;
			else if (index$1 >= slideCount) animationSlide = index$1 - slideCount;
			if (lazyLoad && lazyLoadedList.indexOf(animationSlide) < 0) lazyLoadedList = lazyLoadedList.concat(animationSlide);
			state = {
				animating: true,
				currentSlide: animationSlide,
				lazyLoadedList,
				targetSlide: animationSlide
			};
			nextState = {
				animating: false,
				targetSlide: animationSlide
			};
		} else {
			finalSlide = animationSlide;
			if (animationSlide < 0) {
				finalSlide = animationSlide + slideCount;
				if (!infinite) finalSlide = 0;
				else if (slideCount % slidesToScroll !== 0) finalSlide = slideCount - slideCount % slidesToScroll;
			} else if (!canGoNext(spec) && animationSlide > currentSlide) animationSlide = finalSlide = currentSlide;
			else if (centerMode && animationSlide >= slideCount) {
				animationSlide = infinite ? slideCount : slideCount - 1;
				finalSlide = infinite ? 0 : slideCount - 1;
			} else if (animationSlide >= slideCount) {
				finalSlide = animationSlide - slideCount;
				if (!infinite) finalSlide = slideCount - slidesToShow;
				else if (slideCount % slidesToScroll !== 0) finalSlide = 0;
			}
			if (!infinite && animationSlide + slidesToShow >= slideCount) finalSlide = slideCount - slidesToShow;
			animationLeft = getTrackLeft(_objectSpread$5(_objectSpread$5({}, spec), {}, { slideIndex: animationSlide }));
			finalLeft = getTrackLeft(_objectSpread$5(_objectSpread$5({}, spec), {}, { slideIndex: finalSlide }));
			if (!infinite) {
				if (animationLeft === finalLeft) animationSlide = finalSlide;
				animationLeft = finalLeft;
			}
			if (lazyLoad) lazyLoadedList = lazyLoadedList.concat(getOnDemandLazySlides(_objectSpread$5(_objectSpread$5({}, spec), {}, { currentSlide: animationSlide })));
			if (!useCSS) state = {
				currentSlide: finalSlide,
				trackStyle: getTrackCSS(_objectSpread$5(_objectSpread$5({}, spec), {}, { left: finalLeft })),
				lazyLoadedList,
				targetSlide
			};
			else {
				state = {
					animating: true,
					currentSlide: finalSlide,
					trackStyle: getTrackAnimateCSS(_objectSpread$5(_objectSpread$5({}, spec), {}, { left: animationLeft })),
					lazyLoadedList,
					targetSlide
				};
				nextState = {
					animating: false,
					currentSlide: finalSlide,
					trackStyle: getTrackCSS(_objectSpread$5(_objectSpread$5({}, spec), {}, { left: finalLeft })),
					swipeLeft: null,
					targetSlide
				};
			}
		}
		return {
			state,
			nextState
		};
	};
	exports.changeSlide = function changeSlide(spec, options) {
		var indexOffset, previousInt, slideOffset, unevenOffset, targetSlide;
		var slidesToScroll = spec.slidesToScroll, slidesToShow = spec.slidesToShow, slideCount = spec.slideCount, currentSlide = spec.currentSlide, previousTargetSlide = spec.targetSlide, lazyLoad = spec.lazyLoad, infinite = spec.infinite;
		unevenOffset = slideCount % slidesToScroll !== 0;
		indexOffset = unevenOffset ? 0 : (slideCount - currentSlide) % slidesToScroll;
		if (options.message === "previous") {
			slideOffset = indexOffset === 0 ? slidesToScroll : slidesToShow - indexOffset;
			targetSlide = currentSlide - slideOffset;
			if (lazyLoad && !infinite) {
				previousInt = currentSlide - slideOffset;
				targetSlide = previousInt === -1 ? slideCount - 1 : previousInt;
			}
			if (!infinite) targetSlide = previousTargetSlide - slidesToScroll;
		} else if (options.message === "next") {
			slideOffset = indexOffset === 0 ? slidesToScroll : indexOffset;
			targetSlide = currentSlide + slideOffset;
			if (lazyLoad && !infinite) targetSlide = (currentSlide + slidesToScroll) % slideCount + indexOffset;
			if (!infinite) targetSlide = previousTargetSlide + slidesToScroll;
		} else if (options.message === "dots") targetSlide = options.index * options.slidesToScroll;
		else if (options.message === "children") {
			targetSlide = options.index;
			if (infinite) {
				var direction = siblingDirection(_objectSpread$5(_objectSpread$5({}, spec), {}, { targetSlide }));
				if (targetSlide > options.currentSlide && direction === "left") targetSlide = targetSlide - slideCount;
				else if (targetSlide < options.currentSlide && direction === "right") targetSlide = targetSlide + slideCount;
			}
		} else if (options.message === "index") targetSlide = Number(options.index);
		return targetSlide;
	};
	exports.keyHandler = function keyHandler(e, accessibility, rtl) {
		if (e.target.tagName.match("TEXTAREA|INPUT|SELECT") || !accessibility) return "";
		if (e.keyCode === 37) return rtl ? "next" : "previous";
		if (e.keyCode === 39) return rtl ? "previous" : "next";
		return "";
	};
	exports.swipeStart = function swipeStart(e, swipe, draggable) {
		e.target.tagName === "IMG" && safePreventDefault(e);
		if (!swipe || !draggable && e.type.indexOf("mouse") !== -1) return "";
		return {
			dragging: true,
			touchObject: {
				startX: e.touches ? e.touches[0].pageX : e.clientX,
				startY: e.touches ? e.touches[0].pageY : e.clientY,
				curX: e.touches ? e.touches[0].pageX : e.clientX,
				curY: e.touches ? e.touches[0].pageY : e.clientY
			}
		};
	};
	exports.swipeMove = function swipeMove(e, spec) {
		var scrolling = spec.scrolling, animating = spec.animating, vertical = spec.vertical, swipeToSlide = spec.swipeToSlide, verticalSwiping = spec.verticalSwiping, rtl = spec.rtl, currentSlide = spec.currentSlide, edgeFriction = spec.edgeFriction, edgeDragged = spec.edgeDragged, onEdge = spec.onEdge, swiped = spec.swiped, swiping = spec.swiping, slideCount = spec.slideCount, slidesToScroll = spec.slidesToScroll, infinite = spec.infinite, touchObject = spec.touchObject, swipeEvent = spec.swipeEvent, listHeight = spec.listHeight, listWidth = spec.listWidth;
		if (scrolling) return;
		if (animating) return safePreventDefault(e);
		if (vertical && swipeToSlide && verticalSwiping) safePreventDefault(e);
		var swipeLeft, state = {};
		var curLeft = getTrackLeft(spec);
		touchObject.curX = e.touches ? e.touches[0].pageX : e.clientX;
		touchObject.curY = e.touches ? e.touches[0].pageY : e.clientY;
		touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(touchObject.curX - touchObject.startX, 2)));
		var verticalSwipeLength = Math.round(Math.sqrt(Math.pow(touchObject.curY - touchObject.startY, 2)));
		if (!verticalSwiping && !swiping && verticalSwipeLength > 10) return { scrolling: true };
		if (verticalSwiping) touchObject.swipeLength = verticalSwipeLength;
		var positionOffset = (!rtl ? 1 : -1) * (touchObject.curX > touchObject.startX ? 1 : -1);
		if (verticalSwiping) positionOffset = touchObject.curY > touchObject.startY ? 1 : -1;
		var dotCount = Math.ceil(slideCount / slidesToScroll);
		var swipeDirection = getSwipeDirection(spec.touchObject, verticalSwiping);
		var touchSwipeLength = touchObject.swipeLength;
		if (!infinite) {
			if (currentSlide === 0 && (swipeDirection === "right" || swipeDirection === "down") || currentSlide + 1 >= dotCount && (swipeDirection === "left" || swipeDirection === "up") || !canGoNext(spec) && (swipeDirection === "left" || swipeDirection === "up")) {
				touchSwipeLength = touchObject.swipeLength * edgeFriction;
				if (edgeDragged === false && onEdge) {
					onEdge(swipeDirection);
					state["edgeDragged"] = true;
				}
			}
		}
		if (!swiped && swipeEvent) {
			swipeEvent(swipeDirection);
			state["swiped"] = true;
		}
		if (!vertical) if (!rtl) swipeLeft = curLeft + touchSwipeLength * positionOffset;
		else swipeLeft = curLeft - touchSwipeLength * positionOffset;
		else swipeLeft = curLeft + touchSwipeLength * (listHeight / listWidth) * positionOffset;
		if (verticalSwiping) swipeLeft = curLeft + touchSwipeLength * positionOffset;
		state = _objectSpread$5(_objectSpread$5({}, state), {}, {
			touchObject,
			swipeLeft,
			trackStyle: getTrackCSS(_objectSpread$5(_objectSpread$5({}, spec), {}, { left: swipeLeft }))
		});
		if (Math.abs(touchObject.curX - touchObject.startX) < Math.abs(touchObject.curY - touchObject.startY) * .8) return state;
		if (touchObject.swipeLength > 10) {
			state["swiping"] = true;
			safePreventDefault(e);
		}
		return state;
	};
	exports.swipeEnd = function swipeEnd(e, spec) {
		var dragging = spec.dragging, swipe = spec.swipe, touchObject = spec.touchObject, listWidth = spec.listWidth, touchThreshold = spec.touchThreshold, verticalSwiping = spec.verticalSwiping, listHeight = spec.listHeight, swipeToSlide = spec.swipeToSlide, scrolling = spec.scrolling, onSwipe = spec.onSwipe, targetSlide = spec.targetSlide, currentSlide = spec.currentSlide, infinite = spec.infinite;
		if (!dragging) {
			if (swipe) safePreventDefault(e);
			return {};
		}
		var minSwipe = verticalSwiping ? listHeight / touchThreshold : listWidth / touchThreshold;
		var swipeDirection = getSwipeDirection(touchObject, verticalSwiping);
		var state = {
			dragging: false,
			edgeDragged: false,
			scrolling: false,
			swiping: false,
			swiped: false,
			swipeLeft: null,
			touchObject: {}
		};
		if (scrolling) return state;
		if (!touchObject.swipeLength) return state;
		if (touchObject.swipeLength > minSwipe) {
			safePreventDefault(e);
			if (onSwipe) onSwipe(swipeDirection);
			var slideCount, newSlide;
			var activeSlide = infinite ? currentSlide : targetSlide;
			switch (swipeDirection) {
				case "left":
				case "up":
					newSlide = activeSlide + getSlideCount(spec);
					slideCount = swipeToSlide ? checkNavigable(spec, newSlide) : newSlide;
					state["currentDirection"] = 0;
					break;
				case "right":
				case "down":
					newSlide = activeSlide - getSlideCount(spec);
					slideCount = swipeToSlide ? checkNavigable(spec, newSlide) : newSlide;
					state["currentDirection"] = 1;
					break;
				default: slideCount = activeSlide;
			}
			state["triggerSlideHandler"] = slideCount;
		} else {
			var currentLeft = getTrackLeft(spec);
			state["trackStyle"] = getTrackAnimateCSS(_objectSpread$5(_objectSpread$5({}, spec), {}, { left: currentLeft }));
		}
		return state;
	};
	var getNavigableIndexes = exports.getNavigableIndexes = function getNavigableIndexes$1(spec) {
		var max = spec.infinite ? spec.slideCount * 2 : spec.slideCount;
		var breakpoint = spec.infinite ? spec.slidesToShow * -1 : 0;
		var counter = spec.infinite ? spec.slidesToShow * -1 : 0;
		var indexes = [];
		while (breakpoint < max) {
			indexes.push(breakpoint);
			breakpoint = counter + spec.slidesToScroll;
			counter += Math.min(spec.slidesToScroll, spec.slidesToShow);
		}
		return indexes;
	};
	var checkNavigable = exports.checkNavigable = function checkNavigable$1(spec, index$1) {
		var navigables = getNavigableIndexes(spec);
		var prevNavigable = 0;
		if (index$1 > navigables[navigables.length - 1]) index$1 = navigables[navigables.length - 1];
		else for (var n in navigables) {
			if (index$1 < navigables[n]) {
				index$1 = prevNavigable;
				break;
			}
			prevNavigable = navigables[n];
		}
		return index$1;
	};
	var getSlideCount = exports.getSlideCount = function getSlideCount$1(spec) {
		var centerOffset = spec.centerMode ? spec.slideWidth * Math.floor(spec.slidesToShow / 2) : 0;
		if (spec.swipeToSlide) {
			var swipedSlide;
			var slickList = spec.listRef;
			var slides = slickList.querySelectorAll && slickList.querySelectorAll(".slick-slide") || [];
			Array.from(slides).every(function(slide) {
				if (!spec.vertical) {
					if (slide.offsetLeft - centerOffset + getWidth(slide) / 2 > spec.swipeLeft * -1) {
						swipedSlide = slide;
						return false;
					}
				} else if (slide.offsetTop + getHeight(slide) / 2 > spec.swipeLeft * -1) {
					swipedSlide = slide;
					return false;
				}
				return true;
			});
			if (!swipedSlide) return 0;
			var currentIndex = spec.rtl === true ? spec.slideCount - spec.currentSlide : spec.currentSlide;
			return Math.abs(swipedSlide.dataset.index - currentIndex) || 1;
		} else return spec.slidesToScroll;
	};
	var checkSpecKeys = exports.checkSpecKeys = function checkSpecKeys$1(spec, keysArray) {
		return keysArray.reduce(function(value, key) {
			return value && spec.hasOwnProperty(key);
		}, true) ? null : console.error("Keys Missing:", spec);
	};
	var getTrackCSS = exports.getTrackCSS = function getTrackCSS$1(spec) {
		checkSpecKeys(spec, [
			"left",
			"variableWidth",
			"slideCount",
			"slidesToShow",
			"slideWidth"
		]);
		var trackWidth, trackHeight;
		if (!spec.vertical) trackWidth = getTotalSlides(spec) * spec.slideWidth;
		else trackHeight = (spec.unslick ? spec.slideCount : spec.slideCount + 2 * spec.slidesToShow) * spec.slideHeight;
		var style = {
			opacity: 1,
			transition: "",
			WebkitTransition: ""
		};
		if (spec.useTransform) {
			var WebkitTransform = !spec.vertical ? "translate3d(" + spec.left + "px, 0px, 0px)" : "translate3d(0px, " + spec.left + "px, 0px)";
			var transform = !spec.vertical ? "translate3d(" + spec.left + "px, 0px, 0px)" : "translate3d(0px, " + spec.left + "px, 0px)";
			var msTransform = !spec.vertical ? "translateX(" + spec.left + "px)" : "translateY(" + spec.left + "px)";
			style = _objectSpread$5(_objectSpread$5({}, style), {}, {
				WebkitTransform,
				transform,
				msTransform
			});
		} else if (spec.vertical) style["top"] = spec.left;
		else style["left"] = spec.left;
		if (spec.fade) style = { opacity: 1 };
		if (trackWidth) style.width = trackWidth;
		if (trackHeight) style.height = trackHeight;
		if (window && !window.addEventListener && window.attachEvent) if (!spec.vertical) style.marginLeft = spec.left + "px";
		else style.marginTop = spec.left + "px";
		return style;
	};
	var getTrackAnimateCSS = exports.getTrackAnimateCSS = function getTrackAnimateCSS$1(spec) {
		checkSpecKeys(spec, [
			"left",
			"variableWidth",
			"slideCount",
			"slidesToShow",
			"slideWidth",
			"speed",
			"cssEase"
		]);
		var style = getTrackCSS(spec);
		if (spec.useTransform) {
			style.WebkitTransition = "-webkit-transform " + spec.speed + "ms " + spec.cssEase;
			style.transition = "transform " + spec.speed + "ms " + spec.cssEase;
		} else if (spec.vertical) style.transition = "top " + spec.speed + "ms " + spec.cssEase;
		else style.transition = "left " + spec.speed + "ms " + spec.cssEase;
		return style;
	};
	var getTrackLeft = exports.getTrackLeft = function getTrackLeft$1(spec) {
		if (spec.unslick) return 0;
		checkSpecKeys(spec, [
			"slideIndex",
			"trackRef",
			"infinite",
			"centerMode",
			"slideCount",
			"slidesToShow",
			"slidesToScroll",
			"slideWidth",
			"listWidth",
			"variableWidth",
			"slideHeight"
		]);
		var slideIndex = spec.slideIndex, trackRef = spec.trackRef, infinite = spec.infinite, centerMode = spec.centerMode, slideCount = spec.slideCount, slidesToShow = spec.slidesToShow, slidesToScroll = spec.slidesToScroll, slideWidth = spec.slideWidth, listWidth = spec.listWidth, variableWidth = spec.variableWidth, slideHeight = spec.slideHeight, fade = spec.fade, vertical = spec.vertical;
		var slideOffset = 0;
		var targetLeft;
		var targetSlide;
		var verticalOffset = 0;
		if (fade || spec.slideCount === 1) return 0;
		var slidesToOffset = 0;
		if (infinite) {
			slidesToOffset = -getPreClones(spec);
			if (slideCount % slidesToScroll !== 0 && slideIndex + slidesToScroll > slideCount) slidesToOffset = -(slideIndex > slideCount ? slidesToShow - (slideIndex - slideCount) : slideCount % slidesToScroll);
			if (centerMode) slidesToOffset += parseInt(slidesToShow / 2);
		} else {
			if (slideCount % slidesToScroll !== 0 && slideIndex + slidesToScroll > slideCount) slidesToOffset = slidesToShow - slideCount % slidesToScroll;
			if (centerMode) slidesToOffset = parseInt(slidesToShow / 2);
		}
		slideOffset = slidesToOffset * slideWidth;
		verticalOffset = slidesToOffset * slideHeight;
		if (!vertical) targetLeft = slideIndex * slideWidth * -1 + slideOffset;
		else targetLeft = slideIndex * slideHeight * -1 + verticalOffset;
		if (variableWidth === true) {
			var targetSlideIndex;
			var trackElem = trackRef && trackRef.node;
			targetSlideIndex = slideIndex + getPreClones(spec);
			targetSlide = trackElem && trackElem.childNodes[targetSlideIndex];
			targetLeft = targetSlide ? targetSlide.offsetLeft * -1 : 0;
			if (centerMode === true) {
				targetSlideIndex = infinite ? slideIndex + getPreClones(spec) : slideIndex;
				targetSlide = trackElem && trackElem.children[targetSlideIndex];
				targetLeft = 0;
				for (var slide = 0; slide < targetSlideIndex; slide++) targetLeft -= trackElem && trackElem.children[slide] && trackElem.children[slide].offsetWidth;
				targetLeft -= parseInt(spec.centerPadding);
				targetLeft += targetSlide && (listWidth - targetSlide.offsetWidth) / 2;
			}
		}
		return targetLeft;
	};
	var getPreClones = exports.getPreClones = function getPreClones$1(spec) {
		if (spec.unslick || !spec.infinite) return 0;
		if (spec.variableWidth) return spec.slideCount;
		return spec.slidesToShow + (spec.centerMode ? 1 : 0);
	};
	var getPostClones = exports.getPostClones = function getPostClones$1(spec) {
		if (spec.unslick || !spec.infinite) return 0;
		if (spec.variableWidth) return spec.slideCount;
		return spec.slidesToShow + (spec.centerMode ? 1 : 0);
	};
	var getTotalSlides = exports.getTotalSlides = function getTotalSlides$1(spec) {
		return spec.slideCount === 1 ? 1 : getPreClones(spec) + spec.slideCount + getPostClones(spec);
	};
	var siblingDirection = exports.siblingDirection = function siblingDirection$1(spec) {
		if (spec.targetSlide > spec.currentSlide) {
			if (spec.targetSlide > spec.currentSlide + slidesOnRight(spec)) return "left";
			return "right";
		} else {
			if (spec.targetSlide < spec.currentSlide - slidesOnLeft(spec)) return "right";
			return "left";
		}
	};
	var slidesOnRight = exports.slidesOnRight = function slidesOnRight$1(_ref) {
		var slidesToShow = _ref.slidesToShow, centerMode = _ref.centerMode, rtl = _ref.rtl, centerPadding = _ref.centerPadding;
		if (centerMode) {
			var right = (slidesToShow - 1) / 2 + 1;
			if (parseInt(centerPadding) > 0) right += 1;
			if (rtl && slidesToShow % 2 === 0) right += 1;
			return right;
		}
		if (rtl) return 0;
		return slidesToShow - 1;
	};
	var slidesOnLeft = exports.slidesOnLeft = function slidesOnLeft$1(_ref2) {
		var slidesToShow = _ref2.slidesToShow, centerMode = _ref2.centerMode, rtl = _ref2.rtl, centerPadding = _ref2.centerPadding;
		if (centerMode) {
			var left = (slidesToShow - 1) / 2 + 1;
			if (parseInt(centerPadding) > 0) left += 1;
			if (!rtl && slidesToShow % 2 === 0) left += 1;
			return left;
		}
		if (rtl) return slidesToShow - 1;
		return 0;
	};
	exports.canUseDOM = function canUseDOM() {
		return !!(typeof window !== "undefined" && window.document && window.document.createElement);
	};
	var validSettings = exports.validSettings = Object.keys(_defaultProps$1["default"]);
	function filterSettings(settings) {
		return validSettings.reduce(function(acc, settingName) {
			if (settings.hasOwnProperty(settingName)) acc[settingName] = settings[settingName];
			return acc;
		}, {});
	}
}) });

//#endregion
//#region node_modules/react-slick/lib/track.js
var require_track = /* @__PURE__ */ __commonJS({ "node_modules/react-slick/lib/track.js": ((exports) => {
	Object.defineProperty(exports, "__esModule", { value: true });
	var _react$4 = _interopRequireDefault$5(require_react());
	var _classnames$3 = _interopRequireDefault$5(require_classnames());
	var _innerSliderUtils$4 = require_innerSliderUtils();
	function _interopRequireDefault$5(e) {
		return e && e.__esModule ? e : { "default": e };
	}
	function _typeof$4(o) {
		"@babel/helpers - typeof";
		return _typeof$4 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o$1) {
			return typeof o$1;
		} : function(o$1) {
			return o$1 && "function" == typeof Symbol && o$1.constructor === Symbol && o$1 !== Symbol.prototype ? "symbol" : typeof o$1;
		}, _typeof$4(o);
	}
	function _extends$3() {
		return _extends$3 = Object.assign ? Object.assign.bind() : function(n) {
			for (var e = 1; e < arguments.length; e++) {
				var t = arguments[e];
				for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
			}
			return n;
		}, _extends$3.apply(null, arguments);
	}
	function _classCallCheck$4(a, n) {
		if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
	}
	function _defineProperties$4(e, r) {
		for (var t = 0; t < r.length; t++) {
			var o = r[t];
			o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey$4(o.key), o);
		}
	}
	function _createClass$4(e, r, t) {
		return r && _defineProperties$4(e.prototype, r), t && _defineProperties$4(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e;
	}
	function _inherits$4(t, e) {
		if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
		t.prototype = Object.create(e && e.prototype, { constructor: {
			value: t,
			writable: !0,
			configurable: !0
		} }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf$4(t, e);
	}
	function _setPrototypeOf$4(t, e) {
		return _setPrototypeOf$4 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t$1, e$1) {
			return t$1.__proto__ = e$1, t$1;
		}, _setPrototypeOf$4(t, e);
	}
	function _createSuper$4(t) {
		var r = _isNativeReflectConstruct$4();
		return function() {
			var e, o = _getPrototypeOf$4(t);
			if (r) {
				var s = _getPrototypeOf$4(this).constructor;
				e = Reflect.construct(o, arguments, s);
			} else e = o.apply(this, arguments);
			return _possibleConstructorReturn$4(this, e);
		};
	}
	function _possibleConstructorReturn$4(t, e) {
		if (e && ("object" == _typeof$4(e) || "function" == typeof e)) return e;
		if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
		return _assertThisInitialized$4(t);
	}
	function _assertThisInitialized$4(e) {
		if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		return e;
	}
	function _isNativeReflectConstruct$4() {
		try {
			var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
		} catch (t$1) {}
		return (_isNativeReflectConstruct$4 = function _isNativeReflectConstruct$5() {
			return !!t;
		})();
	}
	function _getPrototypeOf$4(t) {
		return _getPrototypeOf$4 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t$1) {
			return t$1.__proto__ || Object.getPrototypeOf(t$1);
		}, _getPrototypeOf$4(t);
	}
	function ownKeys$4(e, r) {
		var t = Object.keys(e);
		if (Object.getOwnPropertySymbols) {
			var o = Object.getOwnPropertySymbols(e);
			r && (o = o.filter(function(r$1) {
				return Object.getOwnPropertyDescriptor(e, r$1).enumerable;
			})), t.push.apply(t, o);
		}
		return t;
	}
	function _objectSpread$4(e) {
		for (var r = 1; r < arguments.length; r++) {
			var t = null != arguments[r] ? arguments[r] : {};
			r % 2 ? ownKeys$4(Object(t), !0).forEach(function(r$1) {
				_defineProperty$4(e, r$1, t[r$1]);
			}) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$4(Object(t)).forEach(function(r$1) {
				Object.defineProperty(e, r$1, Object.getOwnPropertyDescriptor(t, r$1));
			});
		}
		return e;
	}
	function _defineProperty$4(e, r, t) {
		return (r = _toPropertyKey$4(r)) in e ? Object.defineProperty(e, r, {
			value: t,
			enumerable: !0,
			configurable: !0,
			writable: !0
		}) : e[r] = t, e;
	}
	function _toPropertyKey$4(t) {
		var i = _toPrimitive$4(t, "string");
		return "symbol" == _typeof$4(i) ? i : i + "";
	}
	function _toPrimitive$4(t, r) {
		if ("object" != _typeof$4(t) || !t) return t;
		var e = t[Symbol.toPrimitive];
		if (void 0 !== e) {
			var i = e.call(t, r || "default");
			if ("object" != _typeof$4(i)) return i;
			throw new TypeError("@@toPrimitive must return a primitive value.");
		}
		return ("string" === r ? String : Number)(t);
	}
	var getSlideClasses = function getSlideClasses$1(spec) {
		var slickActive, slickCenter, slickCloned;
		var centerOffset, index$1;
		if (spec.rtl) index$1 = spec.slideCount - 1 - spec.index;
		else index$1 = spec.index;
		slickCloned = index$1 < 0 || index$1 >= spec.slideCount;
		if (spec.centerMode) {
			centerOffset = Math.floor(spec.slidesToShow / 2);
			slickCenter = (index$1 - spec.currentSlide) % spec.slideCount === 0;
			if (index$1 > spec.currentSlide - centerOffset - 1 && index$1 <= spec.currentSlide + centerOffset) slickActive = true;
		} else slickActive = spec.currentSlide <= index$1 && index$1 < spec.currentSlide + spec.slidesToShow;
		var focusedSlide;
		if (spec.targetSlide < 0) focusedSlide = spec.targetSlide + spec.slideCount;
		else if (spec.targetSlide >= spec.slideCount) focusedSlide = spec.targetSlide - spec.slideCount;
		else focusedSlide = spec.targetSlide;
		var slickCurrent = index$1 === focusedSlide;
		return {
			"slick-slide": true,
			"slick-active": slickActive,
			"slick-center": slickCenter,
			"slick-cloned": slickCloned,
			"slick-current": slickCurrent
		};
	};
	var getSlideStyle = function getSlideStyle$1(spec) {
		var style = {};
		if (spec.variableWidth === void 0 || spec.variableWidth === false) style.width = spec.slideWidth;
		if (spec.fade) {
			style.position = "relative";
			if (spec.vertical) style.top = -spec.index * parseInt(spec.slideHeight);
			else style.left = -spec.index * parseInt(spec.slideWidth);
			style.opacity = spec.currentSlide === spec.index ? 1 : 0;
			style.zIndex = spec.currentSlide === spec.index ? 999 : 998;
			if (spec.useCSS) style.transition = "opacity " + spec.speed + "ms " + spec.cssEase + ", visibility " + spec.speed + "ms " + spec.cssEase;
		}
		return style;
	};
	var getKey = function getKey$1(child, fallbackKey) {
		return child.key || fallbackKey;
	};
	var renderSlides = function renderSlides$1(spec) {
		var key;
		var slides = [];
		var preCloneSlides = [];
		var postCloneSlides = [];
		var childrenCount = _react$4["default"].Children.count(spec.children);
		var startIndex = (0, _innerSliderUtils$4.lazyStartIndex)(spec);
		var endIndex = (0, _innerSliderUtils$4.lazyEndIndex)(spec);
		_react$4["default"].Children.forEach(spec.children, function(elem, index$1) {
			var child;
			var childOnClickOptions = {
				message: "children",
				index: index$1,
				slidesToScroll: spec.slidesToScroll,
				currentSlide: spec.currentSlide
			};
			if (!spec.lazyLoad || spec.lazyLoad && spec.lazyLoadedList.indexOf(index$1) >= 0) child = elem;
			else child = /* @__PURE__ */ _react$4["default"].createElement("div", null);
			var childStyle = getSlideStyle(_objectSpread$4(_objectSpread$4({}, spec), {}, { index: index$1 }));
			var slideClass = child.props.className || "";
			var slideClasses = getSlideClasses(_objectSpread$4(_objectSpread$4({}, spec), {}, { index: index$1 }));
			slides.push(/* @__PURE__ */ _react$4["default"].cloneElement(child, {
				key: "original" + getKey(child, index$1),
				"data-index": index$1,
				className: (0, _classnames$3["default"])(slideClasses, slideClass),
				tabIndex: "-1",
				"aria-hidden": !slideClasses["slick-active"],
				style: _objectSpread$4(_objectSpread$4({ outline: "none" }, child.props.style || {}), childStyle),
				onClick: function onClick(e) {
					child.props && child.props.onClick && child.props.onClick(e);
					if (spec.focusOnSelect) spec.focusOnSelect(childOnClickOptions);
				}
			}));
			if (spec.infinite && childrenCount > 1 && spec.fade === false && !spec.unslick) {
				var preCloneNo = childrenCount - index$1;
				if (preCloneNo <= (0, _innerSliderUtils$4.getPreClones)(spec)) {
					key = -preCloneNo;
					if (key >= startIndex) child = elem;
					slideClasses = getSlideClasses(_objectSpread$4(_objectSpread$4({}, spec), {}, { index: key }));
					preCloneSlides.push(/* @__PURE__ */ _react$4["default"].cloneElement(child, {
						key: "precloned" + getKey(child, key),
						"data-index": key,
						tabIndex: "-1",
						className: (0, _classnames$3["default"])(slideClasses, slideClass),
						"aria-hidden": !slideClasses["slick-active"],
						style: _objectSpread$4(_objectSpread$4({}, child.props.style || {}), childStyle),
						onClick: function onClick(e) {
							child.props && child.props.onClick && child.props.onClick(e);
							if (spec.focusOnSelect) spec.focusOnSelect(childOnClickOptions);
						}
					}));
				}
				if (index$1 < (0, _innerSliderUtils$4.getPostClones)(spec)) {
					key = childrenCount + index$1;
					if (key < endIndex) child = elem;
					slideClasses = getSlideClasses(_objectSpread$4(_objectSpread$4({}, spec), {}, { index: key }));
					postCloneSlides.push(/* @__PURE__ */ _react$4["default"].cloneElement(child, {
						key: "postcloned" + getKey(child, key),
						"data-index": key,
						tabIndex: "-1",
						className: (0, _classnames$3["default"])(slideClasses, slideClass),
						"aria-hidden": !slideClasses["slick-active"],
						style: _objectSpread$4(_objectSpread$4({}, child.props.style || {}), childStyle),
						onClick: function onClick(e) {
							child.props && child.props.onClick && child.props.onClick(e);
							if (spec.focusOnSelect) spec.focusOnSelect(childOnClickOptions);
						}
					}));
				}
			}
		});
		if (spec.rtl) return preCloneSlides.concat(slides, postCloneSlides).reverse();
		else return preCloneSlides.concat(slides, postCloneSlides);
	};
	exports.Track = /* @__PURE__ */ function(_React$PureComponent) {
		_inherits$4(Track, _React$PureComponent);
		var _super = _createSuper$4(Track);
		function Track() {
			var _this;
			_classCallCheck$4(this, Track);
			for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) args[_key] = arguments[_key];
			_this = _super.call.apply(_super, [this].concat(args));
			_defineProperty$4(_assertThisInitialized$4(_this), "node", null);
			_defineProperty$4(_assertThisInitialized$4(_this), "handleRef", function(ref) {
				_this.node = ref;
			});
			return _this;
		}
		_createClass$4(Track, [{
			key: "render",
			value: function render() {
				var slides = renderSlides(this.props);
				var _this$props = this.props, onMouseEnter = _this$props.onMouseEnter, onMouseOver = _this$props.onMouseOver, onMouseLeave = _this$props.onMouseLeave;
				var mouseEvents = {
					onMouseEnter,
					onMouseOver,
					onMouseLeave
				};
				return /* @__PURE__ */ _react$4["default"].createElement("div", _extends$3({
					ref: this.handleRef,
					className: "slick-track",
					style: this.props.trackStyle
				}, mouseEvents), slides);
			}
		}]);
		return Track;
	}(_react$4["default"].PureComponent);
}) });

//#endregion
//#region node_modules/react-slick/lib/dots.js
var require_dots = /* @__PURE__ */ __commonJS({ "node_modules/react-slick/lib/dots.js": ((exports) => {
	function _typeof$3(o) {
		"@babel/helpers - typeof";
		return _typeof$3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o$1) {
			return typeof o$1;
		} : function(o$1) {
			return o$1 && "function" == typeof Symbol && o$1.constructor === Symbol && o$1 !== Symbol.prototype ? "symbol" : typeof o$1;
		}, _typeof$3(o);
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	var _react$3 = _interopRequireDefault$4(require_react());
	var _classnames$2 = _interopRequireDefault$4(require_classnames());
	var _innerSliderUtils$3 = require_innerSliderUtils();
	function _interopRequireDefault$4(e) {
		return e && e.__esModule ? e : { "default": e };
	}
	function ownKeys$3(e, r) {
		var t = Object.keys(e);
		if (Object.getOwnPropertySymbols) {
			var o = Object.getOwnPropertySymbols(e);
			r && (o = o.filter(function(r$1) {
				return Object.getOwnPropertyDescriptor(e, r$1).enumerable;
			})), t.push.apply(t, o);
		}
		return t;
	}
	function _objectSpread$3(e) {
		for (var r = 1; r < arguments.length; r++) {
			var t = null != arguments[r] ? arguments[r] : {};
			r % 2 ? ownKeys$3(Object(t), !0).forEach(function(r$1) {
				_defineProperty$3(e, r$1, t[r$1]);
			}) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3(Object(t)).forEach(function(r$1) {
				Object.defineProperty(e, r$1, Object.getOwnPropertyDescriptor(t, r$1));
			});
		}
		return e;
	}
	function _defineProperty$3(e, r, t) {
		return (r = _toPropertyKey$3(r)) in e ? Object.defineProperty(e, r, {
			value: t,
			enumerable: !0,
			configurable: !0,
			writable: !0
		}) : e[r] = t, e;
	}
	function _classCallCheck$3(a, n) {
		if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
	}
	function _defineProperties$3(e, r) {
		for (var t = 0; t < r.length; t++) {
			var o = r[t];
			o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey$3(o.key), o);
		}
	}
	function _createClass$3(e, r, t) {
		return r && _defineProperties$3(e.prototype, r), t && _defineProperties$3(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e;
	}
	function _toPropertyKey$3(t) {
		var i = _toPrimitive$3(t, "string");
		return "symbol" == _typeof$3(i) ? i : i + "";
	}
	function _toPrimitive$3(t, r) {
		if ("object" != _typeof$3(t) || !t) return t;
		var e = t[Symbol.toPrimitive];
		if (void 0 !== e) {
			var i = e.call(t, r || "default");
			if ("object" != _typeof$3(i)) return i;
			throw new TypeError("@@toPrimitive must return a primitive value.");
		}
		return ("string" === r ? String : Number)(t);
	}
	function _inherits$3(t, e) {
		if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
		t.prototype = Object.create(e && e.prototype, { constructor: {
			value: t,
			writable: !0,
			configurable: !0
		} }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf$3(t, e);
	}
	function _setPrototypeOf$3(t, e) {
		return _setPrototypeOf$3 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t$1, e$1) {
			return t$1.__proto__ = e$1, t$1;
		}, _setPrototypeOf$3(t, e);
	}
	function _createSuper$3(t) {
		var r = _isNativeReflectConstruct$3();
		return function() {
			var e, o = _getPrototypeOf$3(t);
			if (r) {
				var s = _getPrototypeOf$3(this).constructor;
				e = Reflect.construct(o, arguments, s);
			} else e = o.apply(this, arguments);
			return _possibleConstructorReturn$3(this, e);
		};
	}
	function _possibleConstructorReturn$3(t, e) {
		if (e && ("object" == _typeof$3(e) || "function" == typeof e)) return e;
		if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
		return _assertThisInitialized$3(t);
	}
	function _assertThisInitialized$3(e) {
		if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		return e;
	}
	function _isNativeReflectConstruct$3() {
		try {
			var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
		} catch (t$1) {}
		return (_isNativeReflectConstruct$3 = function _isNativeReflectConstruct$5() {
			return !!t;
		})();
	}
	function _getPrototypeOf$3(t) {
		return _getPrototypeOf$3 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t$1) {
			return t$1.__proto__ || Object.getPrototypeOf(t$1);
		}, _getPrototypeOf$3(t);
	}
	var getDotCount = function getDotCount$1(spec) {
		var dots;
		if (spec.infinite) dots = Math.ceil(spec.slideCount / spec.slidesToScroll);
		else dots = Math.ceil((spec.slideCount - spec.slidesToShow) / spec.slidesToScroll) + 1;
		return dots;
	};
	exports.Dots = /* @__PURE__ */ function(_React$PureComponent) {
		_inherits$3(Dots, _React$PureComponent);
		var _super = _createSuper$3(Dots);
		function Dots() {
			_classCallCheck$3(this, Dots);
			return _super.apply(this, arguments);
		}
		_createClass$3(Dots, [{
			key: "clickHandler",
			value: function clickHandler(options, e) {
				e.preventDefault();
				this.props.clickHandler(options);
			}
		}, {
			key: "render",
			value: function render() {
				var _this$props = this.props, onMouseEnter = _this$props.onMouseEnter, onMouseOver = _this$props.onMouseOver, onMouseLeave = _this$props.onMouseLeave, infinite = _this$props.infinite, slidesToScroll = _this$props.slidesToScroll, slidesToShow = _this$props.slidesToShow, slideCount = _this$props.slideCount, currentSlide = _this$props.currentSlide;
				var dotCount = getDotCount({
					slideCount,
					slidesToScroll,
					slidesToShow,
					infinite
				});
				var mouseEvents = {
					onMouseEnter,
					onMouseOver,
					onMouseLeave
				};
				var dots = [];
				for (var i = 0; i < dotCount; i++) {
					var _rightBound = (i + 1) * slidesToScroll - 1;
					var rightBound = infinite ? _rightBound : (0, _innerSliderUtils$3.clamp)(_rightBound, 0, slideCount - 1);
					var _leftBound = rightBound - (slidesToScroll - 1);
					var leftBound = infinite ? _leftBound : (0, _innerSliderUtils$3.clamp)(_leftBound, 0, slideCount - 1);
					var className = (0, _classnames$2["default"])({ "slick-active": infinite ? currentSlide >= leftBound && currentSlide <= rightBound : currentSlide === leftBound });
					var dotOptions = {
						message: "dots",
						index: i,
						slidesToScroll,
						currentSlide
					};
					var onClick = this.clickHandler.bind(this, dotOptions);
					dots = dots.concat(/* @__PURE__ */ _react$3["default"].createElement("li", {
						key: i,
						className
					}, /* @__PURE__ */ _react$3["default"].cloneElement(this.props.customPaging(i), { onClick })));
				}
				return /* @__PURE__ */ _react$3["default"].cloneElement(this.props.appendDots(dots), _objectSpread$3({ className: this.props.dotsClass }, mouseEvents));
			}
		}]);
		return Dots;
	}(_react$3["default"].PureComponent);
}) });

//#endregion
//#region node_modules/react-slick/lib/arrows.js
var require_arrows = /* @__PURE__ */ __commonJS({ "node_modules/react-slick/lib/arrows.js": ((exports) => {
	function _typeof$2(o) {
		"@babel/helpers - typeof";
		return _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o$1) {
			return typeof o$1;
		} : function(o$1) {
			return o$1 && "function" == typeof Symbol && o$1.constructor === Symbol && o$1 !== Symbol.prototype ? "symbol" : typeof o$1;
		}, _typeof$2(o);
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	var _react$2 = _interopRequireDefault$3(require_react());
	var _classnames$1 = _interopRequireDefault$3(require_classnames());
	var _innerSliderUtils$2 = require_innerSliderUtils();
	function _interopRequireDefault$3(e) {
		return e && e.__esModule ? e : { "default": e };
	}
	function _extends$2() {
		return _extends$2 = Object.assign ? Object.assign.bind() : function(n) {
			for (var e = 1; e < arguments.length; e++) {
				var t = arguments[e];
				for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
			}
			return n;
		}, _extends$2.apply(null, arguments);
	}
	function ownKeys$2(e, r) {
		var t = Object.keys(e);
		if (Object.getOwnPropertySymbols) {
			var o = Object.getOwnPropertySymbols(e);
			r && (o = o.filter(function(r$1) {
				return Object.getOwnPropertyDescriptor(e, r$1).enumerable;
			})), t.push.apply(t, o);
		}
		return t;
	}
	function _objectSpread$2(e) {
		for (var r = 1; r < arguments.length; r++) {
			var t = null != arguments[r] ? arguments[r] : {};
			r % 2 ? ownKeys$2(Object(t), !0).forEach(function(r$1) {
				_defineProperty$2(e, r$1, t[r$1]);
			}) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2(Object(t)).forEach(function(r$1) {
				Object.defineProperty(e, r$1, Object.getOwnPropertyDescriptor(t, r$1));
			});
		}
		return e;
	}
	function _defineProperty$2(e, r, t) {
		return (r = _toPropertyKey$2(r)) in e ? Object.defineProperty(e, r, {
			value: t,
			enumerable: !0,
			configurable: !0,
			writable: !0
		}) : e[r] = t, e;
	}
	function _classCallCheck$2(a, n) {
		if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
	}
	function _defineProperties$2(e, r) {
		for (var t = 0; t < r.length; t++) {
			var o = r[t];
			o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey$2(o.key), o);
		}
	}
	function _createClass$2(e, r, t) {
		return r && _defineProperties$2(e.prototype, r), t && _defineProperties$2(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e;
	}
	function _toPropertyKey$2(t) {
		var i = _toPrimitive$2(t, "string");
		return "symbol" == _typeof$2(i) ? i : i + "";
	}
	function _toPrimitive$2(t, r) {
		if ("object" != _typeof$2(t) || !t) return t;
		var e = t[Symbol.toPrimitive];
		if (void 0 !== e) {
			var i = e.call(t, r || "default");
			if ("object" != _typeof$2(i)) return i;
			throw new TypeError("@@toPrimitive must return a primitive value.");
		}
		return ("string" === r ? String : Number)(t);
	}
	function _inherits$2(t, e) {
		if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
		t.prototype = Object.create(e && e.prototype, { constructor: {
			value: t,
			writable: !0,
			configurable: !0
		} }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf$2(t, e);
	}
	function _setPrototypeOf$2(t, e) {
		return _setPrototypeOf$2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t$1, e$1) {
			return t$1.__proto__ = e$1, t$1;
		}, _setPrototypeOf$2(t, e);
	}
	function _createSuper$2(t) {
		var r = _isNativeReflectConstruct$2();
		return function() {
			var e, o = _getPrototypeOf$2(t);
			if (r) {
				var s = _getPrototypeOf$2(this).constructor;
				e = Reflect.construct(o, arguments, s);
			} else e = o.apply(this, arguments);
			return _possibleConstructorReturn$2(this, e);
		};
	}
	function _possibleConstructorReturn$2(t, e) {
		if (e && ("object" == _typeof$2(e) || "function" == typeof e)) return e;
		if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
		return _assertThisInitialized$2(t);
	}
	function _assertThisInitialized$2(e) {
		if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		return e;
	}
	function _isNativeReflectConstruct$2() {
		try {
			var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
		} catch (t$1) {}
		return (_isNativeReflectConstruct$2 = function _isNativeReflectConstruct$5() {
			return !!t;
		})();
	}
	function _getPrototypeOf$2(t) {
		return _getPrototypeOf$2 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t$1) {
			return t$1.__proto__ || Object.getPrototypeOf(t$1);
		}, _getPrototypeOf$2(t);
	}
	exports.PrevArrow = /* @__PURE__ */ function(_React$PureComponent) {
		_inherits$2(PrevArrow, _React$PureComponent);
		var _super = _createSuper$2(PrevArrow);
		function PrevArrow() {
			_classCallCheck$2(this, PrevArrow);
			return _super.apply(this, arguments);
		}
		_createClass$2(PrevArrow, [{
			key: "clickHandler",
			value: function clickHandler(options, e) {
				if (e) e.preventDefault();
				this.props.clickHandler(options, e);
			}
		}, {
			key: "render",
			value: function render() {
				var prevClasses = {
					"slick-arrow": true,
					"slick-prev": true
				};
				var prevHandler = this.clickHandler.bind(this, { message: "previous" });
				if (!this.props.infinite && (this.props.currentSlide === 0 || this.props.slideCount <= this.props.slidesToShow)) {
					prevClasses["slick-disabled"] = true;
					prevHandler = null;
				}
				var prevArrowProps = {
					key: "0",
					"data-role": "none",
					className: (0, _classnames$1["default"])(prevClasses),
					style: { display: "block" },
					onClick: prevHandler
				};
				var customProps = {
					currentSlide: this.props.currentSlide,
					slideCount: this.props.slideCount
				};
				var prevArrow;
				if (this.props.prevArrow) prevArrow = /* @__PURE__ */ _react$2["default"].cloneElement(this.props.prevArrow, _objectSpread$2(_objectSpread$2({}, prevArrowProps), customProps));
				else prevArrow = /* @__PURE__ */ _react$2["default"].createElement("button", _extends$2({
					key: "0",
					type: "button"
				}, prevArrowProps), " ", "Previous");
				return prevArrow;
			}
		}]);
		return PrevArrow;
	}(_react$2["default"].PureComponent);
	exports.NextArrow = /* @__PURE__ */ function(_React$PureComponent2) {
		_inherits$2(NextArrow, _React$PureComponent2);
		var _super2 = _createSuper$2(NextArrow);
		function NextArrow() {
			_classCallCheck$2(this, NextArrow);
			return _super2.apply(this, arguments);
		}
		_createClass$2(NextArrow, [{
			key: "clickHandler",
			value: function clickHandler(options, e) {
				if (e) e.preventDefault();
				this.props.clickHandler(options, e);
			}
		}, {
			key: "render",
			value: function render() {
				var nextClasses = {
					"slick-arrow": true,
					"slick-next": true
				};
				var nextHandler = this.clickHandler.bind(this, { message: "next" });
				if (!(0, _innerSliderUtils$2.canGoNext)(this.props)) {
					nextClasses["slick-disabled"] = true;
					nextHandler = null;
				}
				var nextArrowProps = {
					key: "1",
					"data-role": "none",
					className: (0, _classnames$1["default"])(nextClasses),
					style: { display: "block" },
					onClick: nextHandler
				};
				var customProps = {
					currentSlide: this.props.currentSlide,
					slideCount: this.props.slideCount
				};
				var nextArrow;
				if (this.props.nextArrow) nextArrow = /* @__PURE__ */ _react$2["default"].cloneElement(this.props.nextArrow, _objectSpread$2(_objectSpread$2({}, nextArrowProps), customProps));
				else nextArrow = /* @__PURE__ */ _react$2["default"].createElement("button", _extends$2({
					key: "1",
					type: "button"
				}, nextArrowProps), " ", "Next");
				return nextArrow;
			}
		}]);
		return NextArrow;
	}(_react$2["default"].PureComponent);
}) });

//#endregion
//#region node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js
var ResizeObserver_es_exports = /* @__PURE__ */ __export({ default: () => ResizeObserver_es_default });
/**
* Creates a wrapper function which ensures that provided callback will be
* invoked only once during the specified delay period.
*
* @param {Function} callback - Function to be invoked after the delay period.
* @param {number} delay - Delay after which to invoke callback.
* @returns {Function}
*/
function throttle(callback, delay) {
	var leadingCall = false, trailingCall = false, lastCallTime = 0;
	/**
	* Invokes the original callback function and schedules new invocation if
	* the "proxy" was called during current request.
	*
	* @returns {void}
	*/
	function resolvePending() {
		if (leadingCall) {
			leadingCall = false;
			callback();
		}
		if (trailingCall) proxy();
	}
	/**
	* Callback invoked after the specified delay. It will further postpone
	* invocation of the original function delegating it to the
	* requestAnimationFrame.
	*
	* @returns {void}
	*/
	function timeoutCallback() {
		requestAnimationFrame$1(resolvePending);
	}
	/**
	* Schedules invocation of the original function.
	*
	* @returns {void}
	*/
	function proxy() {
		var timeStamp = Date.now();
		if (leadingCall) {
			if (timeStamp - lastCallTime < trailingTimeout) return;
			trailingCall = true;
		} else {
			leadingCall = true;
			trailingCall = false;
			setTimeout(timeoutCallback, delay);
		}
		lastCallTime = timeStamp;
	}
	return proxy;
}
/**
* Converts provided string to a number.
*
* @param {number|string} value
* @returns {number}
*/
function toFloat(value) {
	return parseFloat(value) || 0;
}
/**
* Extracts borders size from provided styles.
*
* @param {CSSStyleDeclaration} styles
* @param {...string} positions - Borders positions (top, right, ...)
* @returns {number}
*/
function getBordersSize(styles) {
	var positions = [];
	for (var _i = 1; _i < arguments.length; _i++) positions[_i - 1] = arguments[_i];
	return positions.reduce(function(size, position) {
		var value = styles["border-" + position + "-width"];
		return size + toFloat(value);
	}, 0);
}
/**
* Extracts paddings sizes from provided styles.
*
* @param {CSSStyleDeclaration} styles
* @returns {Object} Paddings box.
*/
function getPaddings(styles) {
	var positions = [
		"top",
		"right",
		"bottom",
		"left"
	];
	var paddings = {};
	for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
		var position = positions_1[_i];
		var value = styles["padding-" + position];
		paddings[position] = toFloat(value);
	}
	return paddings;
}
/**
* Calculates content rectangle of provided SVG element.
*
* @param {SVGGraphicsElement} target - Element content rectangle of which needs
*      to be calculated.
* @returns {DOMRectInit}
*/
function getSVGContentRect(target) {
	var bbox = target.getBBox();
	return createRectInit(0, 0, bbox.width, bbox.height);
}
/**
* Calculates content rectangle of provided HTMLElement.
*
* @param {HTMLElement} target - Element for which to calculate the content rectangle.
* @returns {DOMRectInit}
*/
function getHTMLElementContentRect(target) {
	var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
	if (!clientWidth && !clientHeight) return emptyRect;
	var styles = getWindowOf(target).getComputedStyle(target);
	var paddings = getPaddings(styles);
	var horizPad = paddings.left + paddings.right;
	var vertPad = paddings.top + paddings.bottom;
	var width = toFloat(styles.width), height = toFloat(styles.height);
	if (styles.boxSizing === "border-box") {
		if (Math.round(width + horizPad) !== clientWidth) width -= getBordersSize(styles, "left", "right") + horizPad;
		if (Math.round(height + vertPad) !== clientHeight) height -= getBordersSize(styles, "top", "bottom") + vertPad;
	}
	if (!isDocumentElement(target)) {
		var vertScrollbar = Math.round(width + horizPad) - clientWidth;
		var horizScrollbar = Math.round(height + vertPad) - clientHeight;
		if (Math.abs(vertScrollbar) !== 1) width -= vertScrollbar;
		if (Math.abs(horizScrollbar) !== 1) height -= horizScrollbar;
	}
	return createRectInit(paddings.left, paddings.top, width, height);
}
/**
* Checks whether provided element is a document element (<html>).
*
* @param {Element} target - Element to be checked.
* @returns {boolean}
*/
function isDocumentElement(target) {
	return target === getWindowOf(target).document.documentElement;
}
/**
* Calculates an appropriate content rectangle for provided html or svg element.
*
* @param {Element} target - Element content rectangle of which needs to be calculated.
* @returns {DOMRectInit}
*/
function getContentRect(target) {
	if (!isBrowser) return emptyRect;
	if (isSVGGraphicsElement(target)) return getSVGContentRect(target);
	return getHTMLElementContentRect(target);
}
/**
* Creates rectangle with an interface of the DOMRectReadOnly.
* Spec: https://drafts.fxtf.org/geometry/#domrectreadonly
*
* @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.
* @returns {DOMRectReadOnly}
*/
function createReadOnlyRect(_a) {
	var x = _a.x, y = _a.y, width = _a.width, height = _a.height;
	var Constr = typeof DOMRectReadOnly !== "undefined" ? DOMRectReadOnly : Object;
	var rect = Object.create(Constr.prototype);
	defineConfigurable(rect, {
		x,
		y,
		width,
		height,
		top: y,
		right: x + width,
		bottom: height + y,
		left: x
	});
	return rect;
}
/**
* Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.
* Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit
*
* @param {number} x - X coordinate.
* @param {number} y - Y coordinate.
* @param {number} width - Rectangle's width.
* @param {number} height - Rectangle's height.
* @returns {DOMRectInit}
*/
function createRectInit(x, y, width, height) {
	return {
		x,
		y,
		width,
		height
	};
}
var MapShim, isBrowser, global$1, requestAnimationFrame$1, trailingTimeout, REFRESH_DELAY, transitionKeys, mutationObserverSupported, ResizeObserverController, defineConfigurable, getWindowOf, emptyRect, isSVGGraphicsElement, ResizeObservation, ResizeObserverEntry, ResizeObserverSPI, observers, ResizeObserver, index, ResizeObserver_es_default;
var init_ResizeObserver_es = __esm({ "node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js": (() => {
	MapShim = (function() {
		if (typeof Map !== "undefined") return Map;
		/**
		* Returns index in provided array that matches the specified key.
		*
		* @param {Array<Array>} arr
		* @param {*} key
		* @returns {number}
		*/
		function getIndex(arr, key) {
			var result = -1;
			arr.some(function(entry, index$1) {
				if (entry[0] === key) {
					result = index$1;
					return true;
				}
				return false;
			});
			return result;
		}
		return function() {
			function class_1() {
				this.__entries__ = [];
			}
			Object.defineProperty(class_1.prototype, "size", {
				get: function() {
					return this.__entries__.length;
				},
				enumerable: true,
				configurable: true
			});
			/**
			* @param {*} key
			* @returns {*}
			*/
			class_1.prototype.get = function(key) {
				var index$1 = getIndex(this.__entries__, key);
				var entry = this.__entries__[index$1];
				return entry && entry[1];
			};
			/**
			* @param {*} key
			* @param {*} value
			* @returns {void}
			*/
			class_1.prototype.set = function(key, value) {
				var index$1 = getIndex(this.__entries__, key);
				if (~index$1) this.__entries__[index$1][1] = value;
				else this.__entries__.push([key, value]);
			};
			/**
			* @param {*} key
			* @returns {void}
			*/
			class_1.prototype.delete = function(key) {
				var entries = this.__entries__;
				var index$1 = getIndex(entries, key);
				if (~index$1) entries.splice(index$1, 1);
			};
			/**
			* @param {*} key
			* @returns {void}
			*/
			class_1.prototype.has = function(key) {
				return !!~getIndex(this.__entries__, key);
			};
			/**
			* @returns {void}
			*/
			class_1.prototype.clear = function() {
				this.__entries__.splice(0);
			};
			/**
			* @param {Function} callback
			* @param {*} [ctx=null]
			* @returns {void}
			*/
			class_1.prototype.forEach = function(callback, ctx) {
				if (ctx === void 0) ctx = null;
				for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
					var entry = _a[_i];
					callback.call(ctx, entry[1], entry[0]);
				}
			};
			return class_1;
		}();
	})();
	isBrowser = typeof window !== "undefined" && typeof document !== "undefined" && window.document === document;
	global$1 = (function() {
		if (typeof global !== "undefined" && global.Math === Math) return global;
		if (typeof self !== "undefined" && self.Math === Math) return self;
		if (typeof window !== "undefined" && window.Math === Math) return window;
		return Function("return this")();
	})();
	requestAnimationFrame$1 = (function() {
		if (typeof requestAnimationFrame === "function") return requestAnimationFrame.bind(global$1);
		return function(callback) {
			return setTimeout(function() {
				return callback(Date.now());
			}, 1e3 / 60);
		};
	})();
	trailingTimeout = 2;
	REFRESH_DELAY = 20;
	transitionKeys = [
		"top",
		"right",
		"bottom",
		"left",
		"width",
		"height",
		"size",
		"weight"
	];
	mutationObserverSupported = typeof MutationObserver !== "undefined";
	ResizeObserverController = function() {
		/**
		* Creates a new instance of ResizeObserverController.
		*
		* @private
		*/
		function ResizeObserverController$1() {
			/**
			* Indicates whether DOM listeners have been added.
			*
			* @private {boolean}
			*/
			this.connected_ = false;
			/**
			* Tells that controller has subscribed for Mutation Events.
			*
			* @private {boolean}
			*/
			this.mutationEventsAdded_ = false;
			/**
			* Keeps reference to the instance of MutationObserver.
			*
			* @private {MutationObserver}
			*/
			this.mutationsObserver_ = null;
			/**
			* A list of connected observers.
			*
			* @private {Array<ResizeObserverSPI>}
			*/
			this.observers_ = [];
			this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
			this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
		}
		/**
		* Adds observer to observers list.
		*
		* @param {ResizeObserverSPI} observer - Observer to be added.
		* @returns {void}
		*/
		ResizeObserverController$1.prototype.addObserver = function(observer) {
			if (!~this.observers_.indexOf(observer)) this.observers_.push(observer);
			if (!this.connected_) this.connect_();
		};
		/**
		* Removes observer from observers list.
		*
		* @param {ResizeObserverSPI} observer - Observer to be removed.
		* @returns {void}
		*/
		ResizeObserverController$1.prototype.removeObserver = function(observer) {
			var observers$1 = this.observers_;
			var index$1 = observers$1.indexOf(observer);
			if (~index$1) observers$1.splice(index$1, 1);
			if (!observers$1.length && this.connected_) this.disconnect_();
		};
		/**
		* Invokes the update of observers. It will continue running updates insofar
		* it detects changes.
		*
		* @returns {void}
		*/
		ResizeObserverController$1.prototype.refresh = function() {
			if (this.updateObservers_()) this.refresh();
		};
		/**
		* Updates every observer from observers list and notifies them of queued
		* entries.
		*
		* @private
		* @returns {boolean} Returns "true" if any observer has detected changes in
		*      dimensions of it's elements.
		*/
		ResizeObserverController$1.prototype.updateObservers_ = function() {
			var activeObservers = this.observers_.filter(function(observer) {
				return observer.gatherActive(), observer.hasActive();
			});
			activeObservers.forEach(function(observer) {
				return observer.broadcastActive();
			});
			return activeObservers.length > 0;
		};
		/**
		* Initializes DOM listeners.
		*
		* @private
		* @returns {void}
		*/
		ResizeObserverController$1.prototype.connect_ = function() {
			if (!isBrowser || this.connected_) return;
			document.addEventListener("transitionend", this.onTransitionEnd_);
			window.addEventListener("resize", this.refresh);
			if (mutationObserverSupported) {
				this.mutationsObserver_ = new MutationObserver(this.refresh);
				this.mutationsObserver_.observe(document, {
					attributes: true,
					childList: true,
					characterData: true,
					subtree: true
				});
			} else {
				document.addEventListener("DOMSubtreeModified", this.refresh);
				this.mutationEventsAdded_ = true;
			}
			this.connected_ = true;
		};
		/**
		* Removes DOM listeners.
		*
		* @private
		* @returns {void}
		*/
		ResizeObserverController$1.prototype.disconnect_ = function() {
			if (!isBrowser || !this.connected_) return;
			document.removeEventListener("transitionend", this.onTransitionEnd_);
			window.removeEventListener("resize", this.refresh);
			if (this.mutationsObserver_) this.mutationsObserver_.disconnect();
			if (this.mutationEventsAdded_) document.removeEventListener("DOMSubtreeModified", this.refresh);
			this.mutationsObserver_ = null;
			this.mutationEventsAdded_ = false;
			this.connected_ = false;
		};
		/**
		* "Transitionend" event handler.
		*
		* @private
		* @param {TransitionEvent} event
		* @returns {void}
		*/
		ResizeObserverController$1.prototype.onTransitionEnd_ = function(_a) {
			var _b = _a.propertyName, propertyName = _b === void 0 ? "" : _b;
			if (transitionKeys.some(function(key) {
				return !!~propertyName.indexOf(key);
			})) this.refresh();
		};
		/**
		* Returns instance of the ResizeObserverController.
		*
		* @returns {ResizeObserverController}
		*/
		ResizeObserverController$1.getInstance = function() {
			if (!this.instance_) this.instance_ = new ResizeObserverController$1();
			return this.instance_;
		};
		/**
		* Holds reference to the controller's instance.
		*
		* @private {ResizeObserverController}
		*/
		ResizeObserverController$1.instance_ = null;
		return ResizeObserverController$1;
	}();
	defineConfigurable = (function(target, props) {
		for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
			var key = _a[_i];
			Object.defineProperty(target, key, {
				value: props[key],
				enumerable: false,
				writable: false,
				configurable: true
			});
		}
		return target;
	});
	getWindowOf = (function(target) {
		return target && target.ownerDocument && target.ownerDocument.defaultView || global$1;
	});
	emptyRect = createRectInit(0, 0, 0, 0);
	isSVGGraphicsElement = (function() {
		if (typeof SVGGraphicsElement !== "undefined") return function(target) {
			return target instanceof getWindowOf(target).SVGGraphicsElement;
		};
		return function(target) {
			return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === "function";
		};
	})();
	ResizeObservation = function() {
		/**
		* Creates an instance of ResizeObservation.
		*
		* @param {Element} target - Element to be observed.
		*/
		function ResizeObservation$1(target) {
			/**
			* Broadcasted width of content rectangle.
			*
			* @type {number}
			*/
			this.broadcastWidth = 0;
			/**
			* Broadcasted height of content rectangle.
			*
			* @type {number}
			*/
			this.broadcastHeight = 0;
			/**
			* Reference to the last observed content rectangle.
			*
			* @private {DOMRectInit}
			*/
			this.contentRect_ = createRectInit(0, 0, 0, 0);
			this.target = target;
		}
		/**
		* Updates content rectangle and tells whether it's width or height properties
		* have changed since the last broadcast.
		*
		* @returns {boolean}
		*/
		ResizeObservation$1.prototype.isActive = function() {
			var rect = getContentRect(this.target);
			this.contentRect_ = rect;
			return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
		};
		/**
		* Updates 'broadcastWidth' and 'broadcastHeight' properties with a data
		* from the corresponding properties of the last observed content rectangle.
		*
		* @returns {DOMRectInit} Last observed content rectangle.
		*/
		ResizeObservation$1.prototype.broadcastRect = function() {
			var rect = this.contentRect_;
			this.broadcastWidth = rect.width;
			this.broadcastHeight = rect.height;
			return rect;
		};
		return ResizeObservation$1;
	}();
	ResizeObserverEntry = function() {
		/**
		* Creates an instance of ResizeObserverEntry.
		*
		* @param {Element} target - Element that is being observed.
		* @param {DOMRectInit} rectInit - Data of the element's content rectangle.
		*/
		function ResizeObserverEntry$1(target, rectInit) {
			var contentRect = createReadOnlyRect(rectInit);
			defineConfigurable(this, {
				target,
				contentRect
			});
		}
		return ResizeObserverEntry$1;
	}();
	ResizeObserverSPI = function() {
		/**
		* Creates a new instance of ResizeObserver.
		*
		* @param {ResizeObserverCallback} callback - Callback function that is invoked
		*      when one of the observed elements changes it's content dimensions.
		* @param {ResizeObserverController} controller - Controller instance which
		*      is responsible for the updates of observer.
		* @param {ResizeObserver} callbackCtx - Reference to the public
		*      ResizeObserver instance which will be passed to callback function.
		*/
		function ResizeObserverSPI$1(callback, controller, callbackCtx) {
			/**
			* Collection of resize observations that have detected changes in dimensions
			* of elements.
			*
			* @private {Array<ResizeObservation>}
			*/
			this.activeObservations_ = [];
			/**
			* Registry of the ResizeObservation instances.
			*
			* @private {Map<Element, ResizeObservation>}
			*/
			this.observations_ = new MapShim();
			if (typeof callback !== "function") throw new TypeError("The callback provided as parameter 1 is not a function.");
			this.callback_ = callback;
			this.controller_ = controller;
			this.callbackCtx_ = callbackCtx;
		}
		/**
		* Starts observing provided element.
		*
		* @param {Element} target - Element to be observed.
		* @returns {void}
		*/
		ResizeObserverSPI$1.prototype.observe = function(target) {
			if (!arguments.length) throw new TypeError("1 argument required, but only 0 present.");
			if (typeof Element === "undefined" || !(Element instanceof Object)) return;
			if (!(target instanceof getWindowOf(target).Element)) throw new TypeError("parameter 1 is not of type \"Element\".");
			var observations = this.observations_;
			if (observations.has(target)) return;
			observations.set(target, new ResizeObservation(target));
			this.controller_.addObserver(this);
			this.controller_.refresh();
		};
		/**
		* Stops observing provided element.
		*
		* @param {Element} target - Element to stop observing.
		* @returns {void}
		*/
		ResizeObserverSPI$1.prototype.unobserve = function(target) {
			if (!arguments.length) throw new TypeError("1 argument required, but only 0 present.");
			if (typeof Element === "undefined" || !(Element instanceof Object)) return;
			if (!(target instanceof getWindowOf(target).Element)) throw new TypeError("parameter 1 is not of type \"Element\".");
			var observations = this.observations_;
			if (!observations.has(target)) return;
			observations.delete(target);
			if (!observations.size) this.controller_.removeObserver(this);
		};
		/**
		* Stops observing all elements.
		*
		* @returns {void}
		*/
		ResizeObserverSPI$1.prototype.disconnect = function() {
			this.clearActive();
			this.observations_.clear();
			this.controller_.removeObserver(this);
		};
		/**
		* Collects observation instances the associated element of which has changed
		* it's content rectangle.
		*
		* @returns {void}
		*/
		ResizeObserverSPI$1.prototype.gatherActive = function() {
			var _this = this;
			this.clearActive();
			this.observations_.forEach(function(observation) {
				if (observation.isActive()) _this.activeObservations_.push(observation);
			});
		};
		/**
		* Invokes initial callback function with a list of ResizeObserverEntry
		* instances collected from active resize observations.
		*
		* @returns {void}
		*/
		ResizeObserverSPI$1.prototype.broadcastActive = function() {
			if (!this.hasActive()) return;
			var ctx = this.callbackCtx_;
			var entries = this.activeObservations_.map(function(observation) {
				return new ResizeObserverEntry(observation.target, observation.broadcastRect());
			});
			this.callback_.call(ctx, entries, ctx);
			this.clearActive();
		};
		/**
		* Clears the collection of active observations.
		*
		* @returns {void}
		*/
		ResizeObserverSPI$1.prototype.clearActive = function() {
			this.activeObservations_.splice(0);
		};
		/**
		* Tells whether observer has active observations.
		*
		* @returns {boolean}
		*/
		ResizeObserverSPI$1.prototype.hasActive = function() {
			return this.activeObservations_.length > 0;
		};
		return ResizeObserverSPI$1;
	}();
	observers = typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : new MapShim();
	ResizeObserver = function() {
		/**
		* Creates a new instance of ResizeObserver.
		*
		* @param {ResizeObserverCallback} callback - Callback that is invoked when
		*      dimensions of the observed elements change.
		*/
		function ResizeObserver$1(callback) {
			if (!(this instanceof ResizeObserver$1)) throw new TypeError("Cannot call a class as a function.");
			if (!arguments.length) throw new TypeError("1 argument required, but only 0 present.");
			var controller = ResizeObserverController.getInstance();
			var observer = new ResizeObserverSPI(callback, controller, this);
			observers.set(this, observer);
		}
		return ResizeObserver$1;
	}();
	[
		"observe",
		"unobserve",
		"disconnect"
	].forEach(function(method) {
		ResizeObserver.prototype[method] = function() {
			var _a;
			return (_a = observers.get(this))[method].apply(_a, arguments);
		};
	});
	index = (function() {
		if (typeof global$1.ResizeObserver !== "undefined") return global$1.ResizeObserver;
		return ResizeObserver;
	})();
	ResizeObserver_es_default = index;
}) });

//#endregion
//#region node_modules/react-slick/lib/inner-slider.js
var require_inner_slider = /* @__PURE__ */ __commonJS({ "node_modules/react-slick/lib/inner-slider.js": ((exports) => {
	Object.defineProperty(exports, "__esModule", { value: true });
	var _react$1 = _interopRequireDefault$2(require_react());
	var _initialState = _interopRequireDefault$2(require_initial_state());
	var _lodash = _interopRequireDefault$2(require_lodash());
	var _classnames = _interopRequireDefault$2(require_classnames());
	var _innerSliderUtils$1 = require_innerSliderUtils();
	var _track = require_track();
	var _dots = require_dots();
	var _arrows = require_arrows();
	var _resizeObserverPolyfill = _interopRequireDefault$2((init_ResizeObserver_es(), __toCommonJS(ResizeObserver_es_exports)));
	function _interopRequireDefault$2(e) {
		return e && e.__esModule ? e : { "default": e };
	}
	function _typeof$1(o) {
		"@babel/helpers - typeof";
		return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o$1) {
			return typeof o$1;
		} : function(o$1) {
			return o$1 && "function" == typeof Symbol && o$1.constructor === Symbol && o$1 !== Symbol.prototype ? "symbol" : typeof o$1;
		}, _typeof$1(o);
	}
	function _extends$1() {
		return _extends$1 = Object.assign ? Object.assign.bind() : function(n) {
			for (var e = 1; e < arguments.length; e++) {
				var t = arguments[e];
				for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
			}
			return n;
		}, _extends$1.apply(null, arguments);
	}
	function _objectWithoutProperties(e, t) {
		if (null == e) return {};
		var o, r, i = _objectWithoutPropertiesLoose(e, t);
		if (Object.getOwnPropertySymbols) {
			var s = Object.getOwnPropertySymbols(e);
			for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
		}
		return i;
	}
	function _objectWithoutPropertiesLoose(r, e) {
		if (null == r) return {};
		var t = {};
		for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
			if (e.includes(n)) continue;
			t[n] = r[n];
		}
		return t;
	}
	function ownKeys$1(e, r) {
		var t = Object.keys(e);
		if (Object.getOwnPropertySymbols) {
			var o = Object.getOwnPropertySymbols(e);
			r && (o = o.filter(function(r$1) {
				return Object.getOwnPropertyDescriptor(e, r$1).enumerable;
			})), t.push.apply(t, o);
		}
		return t;
	}
	function _objectSpread$1(e) {
		for (var r = 1; r < arguments.length; r++) {
			var t = null != arguments[r] ? arguments[r] : {};
			r % 2 ? ownKeys$1(Object(t), !0).forEach(function(r$1) {
				_defineProperty$1(e, r$1, t[r$1]);
			}) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function(r$1) {
				Object.defineProperty(e, r$1, Object.getOwnPropertyDescriptor(t, r$1));
			});
		}
		return e;
	}
	function _classCallCheck$1(a, n) {
		if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
	}
	function _defineProperties$1(e, r) {
		for (var t = 0; t < r.length; t++) {
			var o = r[t];
			o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey$1(o.key), o);
		}
	}
	function _createClass$1(e, r, t) {
		return r && _defineProperties$1(e.prototype, r), t && _defineProperties$1(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e;
	}
	function _inherits$1(t, e) {
		if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
		t.prototype = Object.create(e && e.prototype, { constructor: {
			value: t,
			writable: !0,
			configurable: !0
		} }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf$1(t, e);
	}
	function _setPrototypeOf$1(t, e) {
		return _setPrototypeOf$1 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t$1, e$1) {
			return t$1.__proto__ = e$1, t$1;
		}, _setPrototypeOf$1(t, e);
	}
	function _createSuper$1(t) {
		var r = _isNativeReflectConstruct$1();
		return function() {
			var e, o = _getPrototypeOf$1(t);
			if (r) {
				var s = _getPrototypeOf$1(this).constructor;
				e = Reflect.construct(o, arguments, s);
			} else e = o.apply(this, arguments);
			return _possibleConstructorReturn$1(this, e);
		};
	}
	function _possibleConstructorReturn$1(t, e) {
		if (e && ("object" == _typeof$1(e) || "function" == typeof e)) return e;
		if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
		return _assertThisInitialized$1(t);
	}
	function _assertThisInitialized$1(e) {
		if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		return e;
	}
	function _isNativeReflectConstruct$1() {
		try {
			var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
		} catch (t$1) {}
		return (_isNativeReflectConstruct$1 = function _isNativeReflectConstruct$5() {
			return !!t;
		})();
	}
	function _getPrototypeOf$1(t) {
		return _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t$1) {
			return t$1.__proto__ || Object.getPrototypeOf(t$1);
		}, _getPrototypeOf$1(t);
	}
	function _defineProperty$1(e, r, t) {
		return (r = _toPropertyKey$1(r)) in e ? Object.defineProperty(e, r, {
			value: t,
			enumerable: !0,
			configurable: !0,
			writable: !0
		}) : e[r] = t, e;
	}
	function _toPropertyKey$1(t) {
		var i = _toPrimitive$1(t, "string");
		return "symbol" == _typeof$1(i) ? i : i + "";
	}
	function _toPrimitive$1(t, r) {
		if ("object" != _typeof$1(t) || !t) return t;
		var e = t[Symbol.toPrimitive];
		if (void 0 !== e) {
			var i = e.call(t, r || "default");
			if ("object" != _typeof$1(i)) return i;
			throw new TypeError("@@toPrimitive must return a primitive value.");
		}
		return ("string" === r ? String : Number)(t);
	}
	exports.InnerSlider = /* @__PURE__ */ function(_React$Component) {
		_inherits$1(InnerSlider, _React$Component);
		var _super = _createSuper$1(InnerSlider);
		function InnerSlider(props) {
			var _this;
			_classCallCheck$1(this, InnerSlider);
			_this = _super.call(this, props);
			_defineProperty$1(_assertThisInitialized$1(_this), "listRefHandler", function(ref) {
				return _this.list = ref;
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "trackRefHandler", function(ref) {
				return _this.track = ref;
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "adaptHeight", function() {
				if (_this.props.adaptiveHeight && _this.list) {
					var elem = _this.list.querySelector("[data-index=\"".concat(_this.state.currentSlide, "\"]"));
					_this.list.style.height = (0, _innerSliderUtils$1.getHeight)(elem) + "px";
				}
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "componentDidMount", function() {
				_this.props.onInit && _this.props.onInit();
				if (_this.props.lazyLoad) {
					var slidesToLoad = (0, _innerSliderUtils$1.getOnDemandLazySlides)(_objectSpread$1(_objectSpread$1({}, _this.props), _this.state));
					if (slidesToLoad.length > 0) {
						_this.setState(function(prevState) {
							return { lazyLoadedList: prevState.lazyLoadedList.concat(slidesToLoad) };
						});
						if (_this.props.onLazyLoad) _this.props.onLazyLoad(slidesToLoad);
					}
				}
				var spec = _objectSpread$1({
					listRef: _this.list,
					trackRef: _this.track
				}, _this.props);
				_this.updateState(spec, true, function() {
					_this.adaptHeight();
					_this.props.autoplay && _this.autoPlay("update");
				});
				if (_this.props.lazyLoad === "progressive") _this.lazyLoadTimer = setInterval(_this.progressiveLazyLoad, 1e3);
				_this.ro = new _resizeObserverPolyfill["default"](function() {
					if (_this.state.animating) {
						_this.onWindowResized(false);
						_this.callbackTimers.push(setTimeout(function() {
							return _this.onWindowResized();
						}, _this.props.speed));
					} else _this.onWindowResized();
				});
				_this.ro.observe(_this.list);
				document.querySelectorAll && Array.prototype.forEach.call(document.querySelectorAll(".slick-slide"), function(slide) {
					slide.onfocus = _this.props.pauseOnFocus ? _this.onSlideFocus : null;
					slide.onblur = _this.props.pauseOnFocus ? _this.onSlideBlur : null;
				});
				if (window.addEventListener) window.addEventListener("resize", _this.onWindowResized);
				else window.attachEvent("onresize", _this.onWindowResized);
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "componentWillUnmount", function() {
				if (_this.animationEndCallback) clearTimeout(_this.animationEndCallback);
				if (_this.lazyLoadTimer) clearInterval(_this.lazyLoadTimer);
				if (_this.callbackTimers.length) {
					_this.callbackTimers.forEach(function(timer) {
						return clearTimeout(timer);
					});
					_this.callbackTimers = [];
				}
				if (window.addEventListener) window.removeEventListener("resize", _this.onWindowResized);
				else window.detachEvent("onresize", _this.onWindowResized);
				if (_this.autoplayTimer) clearInterval(_this.autoplayTimer);
				_this.ro.disconnect();
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "componentDidUpdate", function(prevProps) {
				_this.checkImagesLoad();
				_this.props.onReInit && _this.props.onReInit();
				if (_this.props.lazyLoad) {
					var slidesToLoad = (0, _innerSliderUtils$1.getOnDemandLazySlides)(_objectSpread$1(_objectSpread$1({}, _this.props), _this.state));
					if (slidesToLoad.length > 0) {
						_this.setState(function(prevState) {
							return { lazyLoadedList: prevState.lazyLoadedList.concat(slidesToLoad) };
						});
						if (_this.props.onLazyLoad) _this.props.onLazyLoad(slidesToLoad);
					}
				}
				_this.adaptHeight();
				var spec = _objectSpread$1(_objectSpread$1({
					listRef: _this.list,
					trackRef: _this.track
				}, _this.props), _this.state);
				var setTrackStyle = _this.didPropsChange(prevProps);
				setTrackStyle && _this.updateState(spec, setTrackStyle, function() {
					if (_this.state.currentSlide >= _react$1["default"].Children.count(_this.props.children)) _this.changeSlide({
						message: "index",
						index: _react$1["default"].Children.count(_this.props.children) - _this.props.slidesToShow,
						currentSlide: _this.state.currentSlide
					});
					if (_this.props.autoplay) _this.autoPlay("update");
					else _this.pause("paused");
				});
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "onWindowResized", function(setTrackStyle) {
				if (_this.debouncedResize) _this.debouncedResize.cancel();
				_this.debouncedResize = (0, _lodash["default"])(function() {
					return _this.resizeWindow(setTrackStyle);
				}, 50);
				_this.debouncedResize();
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "resizeWindow", function() {
				var setTrackStyle = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
				if (!Boolean(_this.track && _this.track.node)) return;
				var spec = _objectSpread$1(_objectSpread$1({
					listRef: _this.list,
					trackRef: _this.track
				}, _this.props), _this.state);
				_this.updateState(spec, setTrackStyle, function() {
					if (_this.props.autoplay) _this.autoPlay("update");
					else _this.pause("paused");
				});
				_this.setState({ animating: false });
				clearTimeout(_this.animationEndCallback);
				delete _this.animationEndCallback;
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "updateState", function(spec, setTrackStyle, callback) {
				var updatedState = (0, _innerSliderUtils$1.initializedState)(spec);
				spec = _objectSpread$1(_objectSpread$1(_objectSpread$1({}, spec), updatedState), {}, { slideIndex: updatedState.currentSlide });
				var targetLeft = (0, _innerSliderUtils$1.getTrackLeft)(spec);
				spec = _objectSpread$1(_objectSpread$1({}, spec), {}, { left: targetLeft });
				var trackStyle = (0, _innerSliderUtils$1.getTrackCSS)(spec);
				if (setTrackStyle || _react$1["default"].Children.count(_this.props.children) !== _react$1["default"].Children.count(spec.children)) updatedState["trackStyle"] = trackStyle;
				_this.setState(updatedState, callback);
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "ssrInit", function() {
				if (_this.props.variableWidth) {
					var _trackWidth = 0, _trackLeft = 0;
					var childrenWidths = [];
					var preClones = (0, _innerSliderUtils$1.getPreClones)(_objectSpread$1(_objectSpread$1(_objectSpread$1({}, _this.props), _this.state), {}, { slideCount: _this.props.children.length }));
					var postClones = (0, _innerSliderUtils$1.getPostClones)(_objectSpread$1(_objectSpread$1(_objectSpread$1({}, _this.props), _this.state), {}, { slideCount: _this.props.children.length }));
					_this.props.children.forEach(function(child) {
						childrenWidths.push(child.props.style.width);
						_trackWidth += child.props.style.width;
					});
					for (var i = 0; i < preClones; i++) {
						_trackLeft += childrenWidths[childrenWidths.length - 1 - i];
						_trackWidth += childrenWidths[childrenWidths.length - 1 - i];
					}
					for (var _i = 0; _i < postClones; _i++) _trackWidth += childrenWidths[_i];
					for (var _i2 = 0; _i2 < _this.state.currentSlide; _i2++) _trackLeft += childrenWidths[_i2];
					var _trackStyle = {
						width: _trackWidth + "px",
						left: -_trackLeft + "px"
					};
					if (_this.props.centerMode) {
						var currentWidth = "".concat(childrenWidths[_this.state.currentSlide], "px");
						_trackStyle.left = "calc(".concat(_trackStyle.left, " + (100% - ").concat(currentWidth, ") / 2 ) ");
					}
					return { trackStyle: _trackStyle };
				}
				var childrenCount = _react$1["default"].Children.count(_this.props.children);
				var spec = _objectSpread$1(_objectSpread$1(_objectSpread$1({}, _this.props), _this.state), {}, { slideCount: childrenCount });
				var slideCount = (0, _innerSliderUtils$1.getPreClones)(spec) + (0, _innerSliderUtils$1.getPostClones)(spec) + childrenCount;
				var trackWidth = 100 / _this.props.slidesToShow * slideCount;
				var slideWidth = 100 / slideCount;
				var trackLeft = -slideWidth * ((0, _innerSliderUtils$1.getPreClones)(spec) + _this.state.currentSlide) * trackWidth / 100;
				if (_this.props.centerMode) trackLeft += (100 - slideWidth * trackWidth / 100) / 2;
				var trackStyle = {
					width: trackWidth + "%",
					left: trackLeft + "%"
				};
				return {
					slideWidth: slideWidth + "%",
					trackStyle
				};
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "checkImagesLoad", function() {
				var images = _this.list && _this.list.querySelectorAll && _this.list.querySelectorAll(".slick-slide img") || [];
				var imagesCount = images.length, loadedCount = 0;
				Array.prototype.forEach.call(images, function(image) {
					var handler = function handler$1() {
						return ++loadedCount && loadedCount >= imagesCount && _this.onWindowResized();
					};
					if (!image.onclick) image.onclick = function() {
						return image.parentNode.focus();
					};
					else {
						var prevClickHandler = image.onclick;
						image.onclick = function(e) {
							prevClickHandler(e);
							image.parentNode.focus();
						};
					}
					if (!image.onload) if (_this.props.lazyLoad) image.onload = function() {
						_this.adaptHeight();
						_this.callbackTimers.push(setTimeout(_this.onWindowResized, _this.props.speed));
					};
					else {
						image.onload = handler;
						image.onerror = function() {
							handler();
							_this.props.onLazyLoadError && _this.props.onLazyLoadError();
						};
					}
				});
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "progressiveLazyLoad", function() {
				var slidesToLoad = [];
				var spec = _objectSpread$1(_objectSpread$1({}, _this.props), _this.state);
				for (var index$1 = _this.state.currentSlide; index$1 < _this.state.slideCount + (0, _innerSliderUtils$1.getPostClones)(spec); index$1++) if (_this.state.lazyLoadedList.indexOf(index$1) < 0) {
					slidesToLoad.push(index$1);
					break;
				}
				for (var _index = _this.state.currentSlide - 1; _index >= -(0, _innerSliderUtils$1.getPreClones)(spec); _index--) if (_this.state.lazyLoadedList.indexOf(_index) < 0) {
					slidesToLoad.push(_index);
					break;
				}
				if (slidesToLoad.length > 0) {
					_this.setState(function(state) {
						return { lazyLoadedList: state.lazyLoadedList.concat(slidesToLoad) };
					});
					if (_this.props.onLazyLoad) _this.props.onLazyLoad(slidesToLoad);
				} else if (_this.lazyLoadTimer) {
					clearInterval(_this.lazyLoadTimer);
					delete _this.lazyLoadTimer;
				}
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "slideHandler", function(index$1) {
				var dontAnimate = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
				var _this$props = _this.props, asNavFor = _this$props.asNavFor, beforeChange = _this$props.beforeChange, onLazyLoad = _this$props.onLazyLoad, speed = _this$props.speed, afterChange = _this$props.afterChange;
				var currentSlide = _this.state.currentSlide;
				var _slideHandler = (0, _innerSliderUtils$1.slideHandler)(_objectSpread$1(_objectSpread$1(_objectSpread$1({ index: index$1 }, _this.props), _this.state), {}, {
					trackRef: _this.track,
					useCSS: _this.props.useCSS && !dontAnimate
				})), state = _slideHandler.state, nextState = _slideHandler.nextState;
				if (!state) return;
				beforeChange && beforeChange(currentSlide, state.currentSlide);
				var slidesToLoad = state.lazyLoadedList.filter(function(value) {
					return _this.state.lazyLoadedList.indexOf(value) < 0;
				});
				onLazyLoad && slidesToLoad.length > 0 && onLazyLoad(slidesToLoad);
				if (!_this.props.waitForAnimate && _this.animationEndCallback) {
					clearTimeout(_this.animationEndCallback);
					afterChange && afterChange(currentSlide);
					delete _this.animationEndCallback;
				}
				_this.setState(state, function() {
					if (asNavFor && _this.asNavForIndex !== index$1) {
						_this.asNavForIndex = index$1;
						asNavFor.innerSlider.slideHandler(index$1);
					}
					if (!nextState) return;
					_this.animationEndCallback = setTimeout(function() {
						var animating = nextState.animating, firstBatch = _objectWithoutProperties(nextState, ["animating"]);
						_this.setState(firstBatch, function() {
							_this.callbackTimers.push(setTimeout(function() {
								return _this.setState({ animating });
							}, 10));
							afterChange && afterChange(state.currentSlide);
							delete _this.animationEndCallback;
						});
					}, speed);
				});
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "changeSlide", function(options) {
				var dontAnimate = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
				var spec = _objectSpread$1(_objectSpread$1({}, _this.props), _this.state);
				var targetSlide = (0, _innerSliderUtils$1.changeSlide)(spec, options);
				if (targetSlide !== 0 && !targetSlide) return;
				if (dontAnimate === true) _this.slideHandler(targetSlide, dontAnimate);
				else _this.slideHandler(targetSlide);
				_this.props.autoplay && _this.autoPlay("update");
				if (_this.props.focusOnSelect) {
					var nodes = _this.list.querySelectorAll(".slick-current");
					nodes[0] && nodes[0].focus();
				}
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "clickHandler", function(e) {
				if (_this.clickable === false) {
					e.stopPropagation();
					e.preventDefault();
				}
				_this.clickable = true;
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "keyHandler", function(e) {
				var dir = (0, _innerSliderUtils$1.keyHandler)(e, _this.props.accessibility, _this.props.rtl);
				dir !== "" && _this.changeSlide({ message: dir });
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "selectHandler", function(options) {
				_this.changeSlide(options);
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "disableBodyScroll", function() {
				var preventDefault = function preventDefault$1(e) {
					e = e || window.event;
					if (e.preventDefault) e.preventDefault();
					e.returnValue = false;
				};
				window.ontouchmove = preventDefault;
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "enableBodyScroll", function() {
				window.ontouchmove = null;
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "swipeStart", function(e) {
				if (_this.props.verticalSwiping) _this.disableBodyScroll();
				var state = (0, _innerSliderUtils$1.swipeStart)(e, _this.props.swipe, _this.props.draggable);
				state !== "" && _this.setState(state);
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "swipeMove", function(e) {
				var state = (0, _innerSliderUtils$1.swipeMove)(e, _objectSpread$1(_objectSpread$1(_objectSpread$1({}, _this.props), _this.state), {}, {
					trackRef: _this.track,
					listRef: _this.list,
					slideIndex: _this.state.currentSlide
				}));
				if (!state) return;
				if (state["swiping"]) _this.clickable = false;
				_this.setState(state);
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "swipeEnd", function(e) {
				var state = (0, _innerSliderUtils$1.swipeEnd)(e, _objectSpread$1(_objectSpread$1(_objectSpread$1({}, _this.props), _this.state), {}, {
					trackRef: _this.track,
					listRef: _this.list,
					slideIndex: _this.state.currentSlide
				}));
				if (!state) return;
				var triggerSlideHandler = state["triggerSlideHandler"];
				delete state["triggerSlideHandler"];
				_this.setState(state);
				if (triggerSlideHandler === void 0) return;
				_this.slideHandler(triggerSlideHandler);
				if (_this.props.verticalSwiping) _this.enableBodyScroll();
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "touchEnd", function(e) {
				_this.swipeEnd(e);
				_this.clickable = true;
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "slickPrev", function() {
				_this.callbackTimers.push(setTimeout(function() {
					return _this.changeSlide({ message: "previous" });
				}, 0));
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "slickNext", function() {
				_this.callbackTimers.push(setTimeout(function() {
					return _this.changeSlide({ message: "next" });
				}, 0));
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "slickGoTo", function(slide) {
				var dontAnimate = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
				slide = Number(slide);
				if (isNaN(slide)) return "";
				_this.callbackTimers.push(setTimeout(function() {
					return _this.changeSlide({
						message: "index",
						index: slide,
						currentSlide: _this.state.currentSlide
					}, dontAnimate);
				}, 0));
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "play", function() {
				var nextIndex;
				if (_this.props.rtl) nextIndex = _this.state.currentSlide - _this.props.slidesToScroll;
				else if ((0, _innerSliderUtils$1.canGoNext)(_objectSpread$1(_objectSpread$1({}, _this.props), _this.state))) nextIndex = _this.state.currentSlide + _this.props.slidesToScroll;
				else return false;
				_this.slideHandler(nextIndex);
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "autoPlay", function(playType) {
				if (_this.autoplayTimer) clearInterval(_this.autoplayTimer);
				var autoplaying = _this.state.autoplaying;
				if (playType === "update") {
					if (autoplaying === "hovered" || autoplaying === "focused" || autoplaying === "paused") return;
				} else if (playType === "leave") {
					if (autoplaying === "paused" || autoplaying === "focused") return;
				} else if (playType === "blur") {
					if (autoplaying === "paused" || autoplaying === "hovered") return;
				}
				_this.autoplayTimer = setInterval(_this.play, _this.props.autoplaySpeed + 50);
				_this.setState({ autoplaying: "playing" });
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "pause", function(pauseType) {
				if (_this.autoplayTimer) {
					clearInterval(_this.autoplayTimer);
					_this.autoplayTimer = null;
				}
				var autoplaying = _this.state.autoplaying;
				if (pauseType === "paused") _this.setState({ autoplaying: "paused" });
				else if (pauseType === "focused") {
					if (autoplaying === "hovered" || autoplaying === "playing") _this.setState({ autoplaying: "focused" });
				} else if (autoplaying === "playing") _this.setState({ autoplaying: "hovered" });
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "onDotsOver", function() {
				return _this.props.autoplay && _this.pause("hovered");
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "onDotsLeave", function() {
				return _this.props.autoplay && _this.state.autoplaying === "hovered" && _this.autoPlay("leave");
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "onTrackOver", function() {
				return _this.props.autoplay && _this.pause("hovered");
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "onTrackLeave", function() {
				return _this.props.autoplay && _this.state.autoplaying === "hovered" && _this.autoPlay("leave");
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "onSlideFocus", function() {
				return _this.props.autoplay && _this.pause("focused");
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "onSlideBlur", function() {
				return _this.props.autoplay && _this.state.autoplaying === "focused" && _this.autoPlay("blur");
			});
			_defineProperty$1(_assertThisInitialized$1(_this), "render", function() {
				var className = (0, _classnames["default"])("slick-slider", _this.props.className, {
					"slick-vertical": _this.props.vertical,
					"slick-initialized": true
				});
				var spec = _objectSpread$1(_objectSpread$1({}, _this.props), _this.state);
				var trackProps = (0, _innerSliderUtils$1.extractObject)(spec, [
					"fade",
					"cssEase",
					"speed",
					"infinite",
					"centerMode",
					"focusOnSelect",
					"currentSlide",
					"lazyLoad",
					"lazyLoadedList",
					"rtl",
					"slideWidth",
					"slideHeight",
					"listHeight",
					"vertical",
					"slidesToShow",
					"slidesToScroll",
					"slideCount",
					"trackStyle",
					"variableWidth",
					"unslick",
					"centerPadding",
					"targetSlide",
					"useCSS"
				]);
				var pauseOnHover = _this.props.pauseOnHover;
				trackProps = _objectSpread$1(_objectSpread$1({}, trackProps), {}, {
					onMouseEnter: pauseOnHover ? _this.onTrackOver : null,
					onMouseLeave: pauseOnHover ? _this.onTrackLeave : null,
					onMouseOver: pauseOnHover ? _this.onTrackOver : null,
					focusOnSelect: _this.props.focusOnSelect && _this.clickable ? _this.selectHandler : null
				});
				var dots;
				if (_this.props.dots === true && _this.state.slideCount >= _this.props.slidesToShow) {
					var dotProps = (0, _innerSliderUtils$1.extractObject)(spec, [
						"dotsClass",
						"slideCount",
						"slidesToShow",
						"currentSlide",
						"slidesToScroll",
						"clickHandler",
						"children",
						"customPaging",
						"infinite",
						"appendDots"
					]);
					var pauseOnDotsHover = _this.props.pauseOnDotsHover;
					dotProps = _objectSpread$1(_objectSpread$1({}, dotProps), {}, {
						clickHandler: _this.changeSlide,
						onMouseEnter: pauseOnDotsHover ? _this.onDotsLeave : null,
						onMouseOver: pauseOnDotsHover ? _this.onDotsOver : null,
						onMouseLeave: pauseOnDotsHover ? _this.onDotsLeave : null
					});
					dots = /* @__PURE__ */ _react$1["default"].createElement(_dots.Dots, dotProps);
				}
				var prevArrow, nextArrow;
				var arrowProps = (0, _innerSliderUtils$1.extractObject)(spec, [
					"infinite",
					"centerMode",
					"currentSlide",
					"slideCount",
					"slidesToShow",
					"prevArrow",
					"nextArrow"
				]);
				arrowProps.clickHandler = _this.changeSlide;
				if (_this.props.arrows) {
					prevArrow = /* @__PURE__ */ _react$1["default"].createElement(_arrows.PrevArrow, arrowProps);
					nextArrow = /* @__PURE__ */ _react$1["default"].createElement(_arrows.NextArrow, arrowProps);
				}
				var verticalHeightStyle = null;
				if (_this.props.vertical) verticalHeightStyle = { height: _this.state.listHeight };
				var centerPaddingStyle = null;
				if (_this.props.vertical === false) {
					if (_this.props.centerMode === true) centerPaddingStyle = { padding: "0px " + _this.props.centerPadding };
				} else if (_this.props.centerMode === true) centerPaddingStyle = { padding: _this.props.centerPadding + " 0px" };
				var listStyle = _objectSpread$1(_objectSpread$1({}, verticalHeightStyle), centerPaddingStyle);
				var touchMove = _this.props.touchMove;
				var listProps = {
					className: "slick-list",
					style: listStyle,
					onClick: _this.clickHandler,
					onMouseDown: touchMove ? _this.swipeStart : null,
					onMouseMove: _this.state.dragging && touchMove ? _this.swipeMove : null,
					onMouseUp: touchMove ? _this.swipeEnd : null,
					onMouseLeave: _this.state.dragging && touchMove ? _this.swipeEnd : null,
					onTouchStart: touchMove ? _this.swipeStart : null,
					onTouchMove: _this.state.dragging && touchMove ? _this.swipeMove : null,
					onTouchEnd: touchMove ? _this.touchEnd : null,
					onTouchCancel: _this.state.dragging && touchMove ? _this.swipeEnd : null,
					onKeyDown: _this.props.accessibility ? _this.keyHandler : null
				};
				var innerSliderProps = {
					className,
					dir: "ltr",
					style: _this.props.style
				};
				if (_this.props.unslick) {
					listProps = { className: "slick-list" };
					innerSliderProps = {
						className,
						style: _this.props.style
					};
				}
				return /* @__PURE__ */ _react$1["default"].createElement("div", innerSliderProps, !_this.props.unslick ? prevArrow : "", /* @__PURE__ */ _react$1["default"].createElement("div", _extends$1({ ref: _this.listRefHandler }, listProps), /* @__PURE__ */ _react$1["default"].createElement(_track.Track, _extends$1({ ref: _this.trackRefHandler }, trackProps), _this.props.children)), !_this.props.unslick ? nextArrow : "", !_this.props.unslick ? dots : "");
			});
			_this.list = null;
			_this.track = null;
			_this.state = _objectSpread$1(_objectSpread$1({}, _initialState["default"]), {}, {
				currentSlide: _this.props.initialSlide,
				targetSlide: _this.props.initialSlide ? _this.props.initialSlide : 0,
				slideCount: _react$1["default"].Children.count(_this.props.children)
			});
			_this.callbackTimers = [];
			_this.clickable = true;
			_this.debouncedResize = null;
			var ssrState = _this.ssrInit();
			_this.state = _objectSpread$1(_objectSpread$1({}, _this.state), ssrState);
			return _this;
		}
		_createClass$1(InnerSlider, [{
			key: "didPropsChange",
			value: function didPropsChange(prevProps) {
				var setTrackStyle = false;
				for (var _i3 = 0, _Object$keys = Object.keys(this.props); _i3 < _Object$keys.length; _i3++) {
					var key = _Object$keys[_i3];
					if (!prevProps.hasOwnProperty(key)) {
						setTrackStyle = true;
						break;
					}
					if (_typeof$1(prevProps[key]) === "object" || typeof prevProps[key] === "function" || isNaN(prevProps[key])) continue;
					if (prevProps[key] !== this.props[key]) {
						setTrackStyle = true;
						break;
					}
				}
				return setTrackStyle || _react$1["default"].Children.count(this.props.children) !== _react$1["default"].Children.count(prevProps.children);
			}
		}]);
		return InnerSlider;
	}(_react$1["default"].Component);
}) });

//#endregion
//#region node_modules/string-convert/camel2hyphen.js
var require_camel2hyphen = /* @__PURE__ */ __commonJS({ "node_modules/string-convert/camel2hyphen.js": ((exports, module) => {
	var camel2hyphen$1 = function(str) {
		return str.replace(/[A-Z]/g, function(match) {
			return "-" + match.toLowerCase();
		}).toLowerCase();
	};
	module.exports = camel2hyphen$1;
}) });

//#endregion
//#region node_modules/json2mq/index.js
var require_json2mq = /* @__PURE__ */ __commonJS({ "node_modules/json2mq/index.js": ((exports, module) => {
	var camel2hyphen = require_camel2hyphen();
	var isDimension = function(feature) {
		return /[height|width]$/.test(feature);
	};
	var obj2mq = function(obj) {
		var mq = "";
		var features = Object.keys(obj);
		features.forEach(function(feature, index$1) {
			var value = obj[feature];
			feature = camel2hyphen(feature);
			if (isDimension(feature) && typeof value === "number") value = value + "px";
			if (value === true) mq += feature;
			else if (value === false) mq += "not " + feature;
			else mq += "(" + feature + ": " + value + ")";
			if (index$1 < features.length - 1) mq += " and ";
		});
		return mq;
	};
	var json2mq = function(query) {
		var mq = "";
		if (typeof query === "string") return query;
		if (query instanceof Array) {
			query.forEach(function(q, index$1) {
				mq += obj2mq(q);
				if (index$1 < query.length - 1) mq += ", ";
			});
			return mq;
		}
		return obj2mq(query);
	};
	module.exports = json2mq;
}) });

//#endregion
//#region node_modules/react-slick/lib/slider.js
var require_slider = /* @__PURE__ */ __commonJS({ "node_modules/react-slick/lib/slider.js": ((exports) => {
	Object.defineProperty(exports, "__esModule", { value: true });
	var _react = _interopRequireDefault$1(require_react());
	var _innerSlider = require_inner_slider();
	var _json2mq = _interopRequireDefault$1(require_json2mq());
	var _defaultProps = _interopRequireDefault$1(require_default_props());
	var _innerSliderUtils = require_innerSliderUtils();
	function _interopRequireDefault$1(e) {
		return e && e.__esModule ? e : { "default": e };
	}
	function _typeof(o) {
		"@babel/helpers - typeof";
		return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o$1) {
			return typeof o$1;
		} : function(o$1) {
			return o$1 && "function" == typeof Symbol && o$1.constructor === Symbol && o$1 !== Symbol.prototype ? "symbol" : typeof o$1;
		}, _typeof(o);
	}
	function _extends() {
		return _extends = Object.assign ? Object.assign.bind() : function(n) {
			for (var e = 1; e < arguments.length; e++) {
				var t = arguments[e];
				for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
			}
			return n;
		}, _extends.apply(null, arguments);
	}
	function ownKeys(e, r) {
		var t = Object.keys(e);
		if (Object.getOwnPropertySymbols) {
			var o = Object.getOwnPropertySymbols(e);
			r && (o = o.filter(function(r$1) {
				return Object.getOwnPropertyDescriptor(e, r$1).enumerable;
			})), t.push.apply(t, o);
		}
		return t;
	}
	function _objectSpread(e) {
		for (var r = 1; r < arguments.length; r++) {
			var t = null != arguments[r] ? arguments[r] : {};
			r % 2 ? ownKeys(Object(t), !0).forEach(function(r$1) {
				_defineProperty(e, r$1, t[r$1]);
			}) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r$1) {
				Object.defineProperty(e, r$1, Object.getOwnPropertyDescriptor(t, r$1));
			});
		}
		return e;
	}
	function _classCallCheck(a, n) {
		if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
	}
	function _defineProperties(e, r) {
		for (var t = 0; t < r.length; t++) {
			var o = r[t];
			o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);
		}
	}
	function _createClass(e, r, t) {
		return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e;
	}
	function _inherits(t, e) {
		if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
		t.prototype = Object.create(e && e.prototype, { constructor: {
			value: t,
			writable: !0,
			configurable: !0
		} }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e);
	}
	function _setPrototypeOf(t, e) {
		return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t$1, e$1) {
			return t$1.__proto__ = e$1, t$1;
		}, _setPrototypeOf(t, e);
	}
	function _createSuper(t) {
		var r = _isNativeReflectConstruct();
		return function() {
			var e, o = _getPrototypeOf(t);
			if (r) {
				var s = _getPrototypeOf(this).constructor;
				e = Reflect.construct(o, arguments, s);
			} else e = o.apply(this, arguments);
			return _possibleConstructorReturn(this, e);
		};
	}
	function _possibleConstructorReturn(t, e) {
		if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
		if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
		return _assertThisInitialized(t);
	}
	function _assertThisInitialized(e) {
		if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		return e;
	}
	function _isNativeReflectConstruct() {
		try {
			var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
		} catch (t$1) {}
		return (_isNativeReflectConstruct = function _isNativeReflectConstruct$5() {
			return !!t;
		})();
	}
	function _getPrototypeOf(t) {
		return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t$1) {
			return t$1.__proto__ || Object.getPrototypeOf(t$1);
		}, _getPrototypeOf(t);
	}
	function _defineProperty(e, r, t) {
		return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
			value: t,
			enumerable: !0,
			configurable: !0,
			writable: !0
		}) : e[r] = t, e;
	}
	function _toPropertyKey(t) {
		var i = _toPrimitive(t, "string");
		return "symbol" == _typeof(i) ? i : i + "";
	}
	function _toPrimitive(t, r) {
		if ("object" != _typeof(t) || !t) return t;
		var e = t[Symbol.toPrimitive];
		if (void 0 !== e) {
			var i = e.call(t, r || "default");
			if ("object" != _typeof(i)) return i;
			throw new TypeError("@@toPrimitive must return a primitive value.");
		}
		return ("string" === r ? String : Number)(t);
	}
	exports["default"] = /* @__PURE__ */ function(_React$Component) {
		_inherits(Slider, _React$Component);
		var _super = _createSuper(Slider);
		function Slider(props) {
			var _this;
			_classCallCheck(this, Slider);
			_this = _super.call(this, props);
			_defineProperty(_assertThisInitialized(_this), "innerSliderRefHandler", function(ref) {
				return _this.innerSlider = ref;
			});
			_defineProperty(_assertThisInitialized(_this), "slickPrev", function() {
				return _this.innerSlider.slickPrev();
			});
			_defineProperty(_assertThisInitialized(_this), "slickNext", function() {
				return _this.innerSlider.slickNext();
			});
			_defineProperty(_assertThisInitialized(_this), "slickGoTo", function(slide) {
				var dontAnimate = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
				return _this.innerSlider.slickGoTo(slide, dontAnimate);
			});
			_defineProperty(_assertThisInitialized(_this), "slickPause", function() {
				return _this.innerSlider.pause("paused");
			});
			_defineProperty(_assertThisInitialized(_this), "slickPlay", function() {
				return _this.innerSlider.autoPlay("play");
			});
			_this.state = { breakpoint: null };
			_this._responsiveMediaHandlers = [];
			return _this;
		}
		_createClass(Slider, [
			{
				key: "media",
				value: function media(query, handler) {
					var mql = window.matchMedia(query);
					var listener = function listener$1(_ref) {
						if (_ref.matches) handler();
					};
					mql.addListener(listener);
					this._responsiveMediaHandlers.push({
						mql,
						query,
						listener
					});
				}
			},
			{
				key: "componentDidMount",
				value: function componentDidMount() {
					var _this2 = this;
					if (this.props.responsive) {
						var breakpoints = this.props.responsive.map(function(breakpt) {
							return breakpt.breakpoint;
						});
						breakpoints.sort(function(x, y) {
							return x - y;
						});
						breakpoints.forEach(function(breakpoint, index$1) {
							var bQuery;
							if (index$1 === 0) bQuery = (0, _json2mq["default"])({
								minWidth: 0,
								maxWidth: breakpoint
							});
							else bQuery = (0, _json2mq["default"])({
								minWidth: breakpoints[index$1 - 1] + 1,
								maxWidth: breakpoint
							});
							(0, _innerSliderUtils.canUseDOM)() && _this2.media(bQuery, function() {
								_this2.setState({ breakpoint });
							});
						});
						var query = (0, _json2mq["default"])({ minWidth: breakpoints.slice(-1)[0] });
						(0, _innerSliderUtils.canUseDOM)() && this.media(query, function() {
							_this2.setState({ breakpoint: null });
						});
					}
				}
			},
			{
				key: "componentWillUnmount",
				value: function componentWillUnmount() {
					this._responsiveMediaHandlers.forEach(function(obj) {
						obj.mql.removeListener(obj.listener);
					});
				}
			},
			{
				key: "render",
				value: function render() {
					var _this3 = this;
					var settings;
					var newProps;
					if (this.state.breakpoint) {
						newProps = this.props.responsive.filter(function(resp) {
							return resp.breakpoint === _this3.state.breakpoint;
						});
						settings = newProps[0].settings === "unslick" ? "unslick" : _objectSpread(_objectSpread(_objectSpread({}, _defaultProps["default"]), this.props), newProps[0].settings);
					} else settings = _objectSpread(_objectSpread({}, _defaultProps["default"]), this.props);
					if (settings.centerMode) {
						if (settings.slidesToScroll > 1 && true) console.warn("slidesToScroll should be equal to 1 in centerMode, you are using ".concat(settings.slidesToScroll));
						settings.slidesToScroll = 1;
					}
					if (settings.fade) {
						if (settings.slidesToShow > 1 && true) console.warn("slidesToShow should be equal to 1 when fade is true, you're using ".concat(settings.slidesToShow));
						if (settings.slidesToScroll > 1 && true) console.warn("slidesToScroll should be equal to 1 when fade is true, you're using ".concat(settings.slidesToScroll));
						settings.slidesToShow = 1;
						settings.slidesToScroll = 1;
					}
					var children = _react["default"].Children.toArray(this.props.children);
					children = children.filter(function(child) {
						if (typeof child === "string") return !!child.trim();
						return !!child;
					});
					if (settings.variableWidth && (settings.rows > 1 || settings.slidesPerRow > 1)) {
						console.warn("variableWidth is not supported in case of rows > 1 or slidesPerRow > 1");
						settings.variableWidth = false;
					}
					var newChildren = [];
					var currentWidth = null;
					for (var i = 0; i < children.length; i += settings.rows * settings.slidesPerRow) {
						var newSlide = [];
						for (var j = i; j < i + settings.rows * settings.slidesPerRow; j += settings.slidesPerRow) {
							var row = [];
							for (var k = j; k < j + settings.slidesPerRow; k += 1) {
								if (settings.variableWidth && children[k].props.style) currentWidth = children[k].props.style.width;
								if (k >= children.length) break;
								row.push(/* @__PURE__ */ _react["default"].cloneElement(children[k], {
									key: 100 * i + 10 * j + k,
									tabIndex: -1,
									style: {
										width: "".concat(100 / settings.slidesPerRow, "%"),
										display: "inline-block"
									}
								}));
							}
							newSlide.push(/* @__PURE__ */ _react["default"].createElement("div", { key: 10 * i + j }, row));
						}
						if (settings.variableWidth) newChildren.push(/* @__PURE__ */ _react["default"].createElement("div", {
							key: i,
							style: { width: currentWidth }
						}, newSlide));
						else newChildren.push(/* @__PURE__ */ _react["default"].createElement("div", { key: i }, newSlide));
					}
					if (settings === "unslick") {
						var className = "regular slider " + (this.props.className || "");
						return /* @__PURE__ */ _react["default"].createElement("div", { className }, children);
					} else if (newChildren.length <= settings.slidesToShow) settings.unslick = true;
					return /* @__PURE__ */ _react["default"].createElement(_innerSlider.InnerSlider, _extends({
						style: this.props.style,
						ref: this.innerSliderRefHandler
					}, (0, _innerSliderUtils.filterSettings)(settings)), newChildren);
				}
			}
		]);
		return Slider;
	}(_react["default"].Component);
}) });

//#endregion
//#region node_modules/react-slick/lib/index.js
var require_lib = /* @__PURE__ */ __commonJS({ "node_modules/react-slick/lib/index.js": ((exports) => {
	Object.defineProperty(exports, "__esModule", { value: true });
	var _slider = _interopRequireDefault(require_slider());
	function _interopRequireDefault(e) {
		return e && e.__esModule ? e : { "default": e };
	}
	exports["default"] = _slider["default"];
}) });

//#endregion
export default require_lib();

//# sourceMappingURL=react-slick.js.map